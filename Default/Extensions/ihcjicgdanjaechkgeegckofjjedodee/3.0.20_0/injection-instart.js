!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},o=(new e.Error).stack;o&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[o]="0df3e08b-870e-4926-a462-520355b4c164",e._sentryDebugIdIdentifier="sentry-dbid-0df3e08b-870e-4926-a462-520355b4c164")}catch(e){}}();var _global="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{};_global.SENTRY_RELEASE={id:"52b255b5cc5c7fe9748201022c25eac6092639d0"},(()=>{var e={6136:(e,o,t)=>{"use strict";t.r(o),t.d(o,{URL:()=>s,chrome:()=>i,indexedDB:()=>r,performance:()=>d});const n="undefined"!=typeof window?window:self,i=n.chrome||n.browser||browser;let r;try{r=indexedDB||n.indexedDB}catch(e){console.log(`Error initializing indexedDB: ${e.message}`)}const d=performance||n.performance,s=URL||n.URL}},o={};function t(n){var i=o[n];if(void 0!==i)return i.exports;var r=o[n]={exports:{}};return e[n](r,r.exports,t),r.exports}t.d=(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=new URLSearchParams(document.currentScript.src.split("?")[1]).get("extId");console.debug("INS: Instart scanner loaded into "+window.location.href+" by "+n),function(){function e(e){if(document.currentScript&&document.currentScript.textContent){let o=document.currentScript.textContent,t=["Instart","instart","INSTART","I10C","I11C","I12C","IXC_353_1119062411120848"];for(let n of t)if(o.includes(n))throw new Error("Instart "+e+" Logic")}}function o(o,t){console.debug("INS: "+t+" hooked for "+window.location.href);let n=o[t];Object.defineProperty(o,t,{get:function(){return e(t),n},set:function(o){e(t),n=o}})}function i(e,i){if(console.debug("INS: Sending an is-whitelisted request about "+i),console.debug("INS: Extension ID "+n),window.chrome||window.browser||"undefined"!=typeof browser){const{chrome:r}=t(6136);r.runtime.sendMessage(n,{type:"isInstartWhitelisted",parameters:{href:window.location.href,prop:i}},(t=>{t&&t.isWhitelisted?console.debug("INS: "+i+" is whitelisted for "+window.location.href):(r.runtime.lastError&&console.error("INS: Failed with is-whitelisted request for "+i+": "+r.runtime.lastError.message),o(e,i))}))}else{const e={href:window.location.href,prop:i};window.postMessage({type:"isInstartWhitelisted",parameters:JSON.stringify(e)},`${window.location.protocol}//${window.location.host}`)}}i(window,"INSTART"),i(window,"INSTART_TARGET_NAME"),i(window,"I10C"),i(window,"I11C"),i(window,"I12C"),i(window,"IXC_353_1119062411120848");let r=window.setTimeout;window.setTimeout=function(){return e("Timeout"),r.apply(window,arguments)};let d=window.setInterval;window.setInterval=function(){return e("Interval"),d.apply(window,arguments)},window.addEventListener("message",(e=>{if(!e.origin)return;if(e.origin!==window.location.origin)return;const t=new URL(e.origin).host;if("isInstartWhitelistedResponse"===e.data.type&&t===window.location.host){const t=JSON.parse(e.data.parameters);!1===t.isWhitelisted&&o(window,t.property)}}))}()})();
//# sourceMappingURL=injection-instart.js.map