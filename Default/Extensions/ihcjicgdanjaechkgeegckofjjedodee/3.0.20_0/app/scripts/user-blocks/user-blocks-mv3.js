import{chrome}from"../../../utils/polyfill.ts";import{getExistingDynamicRulesByActionTypes,getLastDynamicRuleId,mainFrameResourceType,supportedSubFrameResourceTypes,DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY}from"../mv3/dynamic-rule-utils";import{simpleStorageGet,simpleStorageSet}from"../../../utils/storage.ts";export class Mv3UserBlocksHandler{constructor(){this.CACHE=new Map}async migrateBlockedItems(){console.debug("Mv3UserBlocksHandler.migrateBlockedItems - Migrating blocked items");const e=(await getExistingDynamicRulesByActionTypes(["block","redirect"],[30])).map((e=>e.id));await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...e]});const t=await simpleStorageGet("blockedItems");if(!t)return void console.debug("Mv3UserBlocksHandler.migrateBlockedItems - No blocked items found");const s=[{domain:"*",blockUrls:t,xpath:""}];await this.importBlockedItems({"*":s}),await chrome.storage.local.remove("blockedItems");const o=await this._getExistingUserBlockDynamicRules();console.debug("Mv3UserBlocksHandler.migrateBlockedItems - newRules: ",{newRules:o});const l=await this.getBlockedItems();return console.debug("Mv3UserBlocksHandler.migrateBlockedItems - newSavedBlockedItems: ",{newSavedBlockedItems:l}),s}async importBlockedItems(e){console.debug("UserBlocksHandler.importBlockedItems - Importing blocked items",{items:e});for(const[t,s]of Object.entries(e))for(const e of s)await this.blockItem({domain:t,...e});console.debug("UserBlocksHandler.importBlockedItems - Imported blocked items",{items:e})}async blockItem(e){console.debug("MV3 UserBlocksHandler: Blocking item",{item:e}),this.CACHE||(this.CACHE=new Map);const t=this.CACHE.get(e.domain)||[],s=t.find((t=>t.xpath.toUpperCase()===e.xpath.toUpperCase()));s?s.blockUrls=Array.from(new Set([...s.blockUrls,...e.blockUrls])):t.push({blockUrls:e.blockUrls,xpath:e.xpath}),this.CACHE.set(e.domain,t),await this.saveBlockedItems()}async getBlockedItems(){await this.loadSavedBlockedItems();const e={};for(const[t,s]of this.CACHE)e[t]=s;return e}async loadSavedBlockedItems(){const e=await simpleStorageGet("userBlockedItems");if(e){this.CACHE=new Map;for(const[t,s]of Object.entries(e))this.CACHE.set(t,s);console.debug("Mv3UserBlocksHandler.loadSavedBlockedItems - cache: ",this.CACHE)}}async saveBlockedItems(){if(!this.CACHE)return!1;const e={};for(const[t,s]of this.CACHE){const o=s.map((e=>({blockUrls:e.blockUrls,xpath:e.xpath})));e[t]=o}return await simpleStorageSet({userBlockedItems:e}),console.debug("Mv3UserBlocksHandler.saveBlockedItems - Saved blocked items to extension storage"),await this._updateDynamicRules(),console.debug("Mv3UserBlocksHandler.saveBlockedItems - Updated dynamic rules"),!0}async deleteBlockedItem(e){if(!this.CACHE)return!1;const{domain:t,_blockUrls:s,xpath:o}=e;let l=this.CACHE.get(t)||[];return l=l.filter((e=>e.xpath.toUpperCase()!==o.toUpperCase())),this.CACHE.set(t,l),console.debug("Mv3UserBlocksHandler.deleteBlockedItem - Cache after deletion: ",{cache:this.CACHE}),await this.saveBlockedItems()}async deleteAllBlockedItems(){return!!this.CACHE&&(console.debug("Mv3UserBlocksHandler.deleteAllBlockedItems - cache: ",{cache:this.CACHE}),this.CACHE.clear(),await this.saveBlockedItems(),console.debug("Mv3UserBlocksHandler.deleteAllBlockedItems - Saved blocked items to extension storage"),!0)}isBlocked(e,t){if(!this.CACHE)return!1;const s=this.CACHE.get(e)||[];if(0===s.length)return!1;for(const e of s){const{blockUrls:s,_xpath:o}=e;if(s.some((e=>e===t)))return!0}return!1}async _updateDynamicRules(){const e=new Map;for(const[t,s]of this.CACHE){const o=s.flatMap((e=>e.blockUrls));e.set(t,Array.from(new Set(o)))}console.debug("Mv3UserBlocksHandler._updateDynamicRules - domainToBlockedUrls: ",e);const t=await this._getExistingUserBlockDynamicRules();console.debug("Mv3UserBlocksHandler._saveItemsToDynamicRuleStorage - existingDynamicRules: ",t);const s=t.map((e=>e.id));await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...s]}),console.debug("Mv3UserBlocksHandler._updateDynamicRules - Deleted existing user-block rules");const o=await this._buildMv3BlockRules(e);console.debug("Mv3UserBlocksHandler._updateDynamicRules - newRules: ",o),await chrome.declarativeNetRequest.updateDynamicRules({addRules:[...o],removeRuleIds:[]})}async _buildMv3BlockRules(e){let t=await getLastDynamicRuleId();const s=[];for(const[o,l]of e)for(const e of l)s.push({id:++t,priority:DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY,action:{type:"block"},condition:{urlFilter:e,resourceTypes:supportedSubFrameResourceTypes(),initiatorDomains:"*"===o?void 0:[o]}}),s.push({id:++t,priority:DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY,action:{type:"redirect",redirect:{extensionPath:"/app/eventpages/block-mv3.html?type=user-block&url="+e}},condition:{urlFilter:e,resourceTypes:mainFrameResourceType,initiatorDomains:"*"===o?void 0:[o]}});return s}async _getExistingUserBlockDynamicRules(){return(await getExistingDynamicRulesByActionTypes(["block","redirect"],[DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY])).filter((e=>e.priority===DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY))}}