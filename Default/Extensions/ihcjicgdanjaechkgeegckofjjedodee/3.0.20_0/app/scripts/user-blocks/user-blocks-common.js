import{simpleStorageGet,simpleStorageSet}from"../../../utils/storage.ts";export default class UserBlocksHandler{constructor(){this.CACHE=new Map}async migrateBlockedItems(){throw new Error("Should be implemented in the subclass")}async importBlockedItems(e){console.debug("UserBlocksHandler.importBlockedItems - Importing blocked items",{items:e});for(const[t,s]of Object.entries(e))for(const e of s)await this.blockItem({domain:t,...e});console.debug("UserBlocksHandler.importBlockedItems - Imported blocked items",{items:e})}async blockItem(e){console.debug("MV3 UserBlocksHandler: Blocking item",{item:e}),this.CACHE||(this.CACHE=new Map);const t=this.CACHE.get(e.domain)||[],s=t.find((t=>t.xpath.toUpperCase()===e.xpath.toUpperCase()));s?s.blockUrls=Array.from(new Set([...s.blockUrls,...e.blockUrls])):t.push({blockUrls:e.blockUrls,xpath:e.xpath}),this.CACHE.set(e.domain,t),await this.saveBlockedItems()}async getBlockedItems(){await this.loadSavedBlockedItems();const e={};for(const[t,s]of this.CACHE)e[t]=s;return e}async loadSavedBlockedItems(){const e=await simpleStorageGet("userBlockedItems");if(e){this.CACHE=new Map;for(const[t,s]of Object.entries(e))this.CACHE.set(t,s);console.debug("UserBlocksHandler.loadSavedBlockedItems - cache: ",this.CACHE)}}async saveBlockedItems(){if(!this.CACHE)return!1;const e={};for(const[t,s]of this.CACHE){const o=s.map((e=>({blockUrls:e.blockUrls,xpath:e.xpath})));e[t]=o}return await simpleStorageSet({userBlockedItems:e}),console.debug("UserBlocksHandler.saveBlockedItems - Saved blocked items to extension storage"),!0}async deleteBlockedItem(e){if(!this.CACHE)return!1;const{domain:t,_blockUrls:s,xpath:o}=e;let l=this.CACHE.get(t)||[];return l=l.filter((e=>e.xpath.toUpperCase()!==o.toUpperCase())),this.CACHE.set(t,l),console.debug("UserBlocksHandler.deleteBlockedItem - Cache after deletion: ",{cache:this.CACHE}),await this.saveBlockedItems()}async deleteAllBlockedItems(){return!!this.CACHE&&(console.debug("UserBlocksHandler.deleteAllBlockedItems - cache: ",{cache:this.CACHE}),this.CACHE.clear(),await this.saveBlockedItems(),console.debug("UserBlocksHandler.deleteAllBlockedItems - Saved blocked items to extension storage"),!0)}isBlocked(e,t){if(!this.CACHE)return!1;const s=this.CACHE.get(e)||[];if(0===s.length)return!1;for(const e of s){const{blockUrls:s,_xpath:o}=e;if(s.some((e=>e===t)))return!0}return!1}}