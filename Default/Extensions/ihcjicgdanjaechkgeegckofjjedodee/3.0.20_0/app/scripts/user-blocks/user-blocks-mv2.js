import UserBlocksHandler from"./user-blocks-common";import{simpleStorageGet}from"../../../utils/storage.ts";import{chrome}from"../../../utils/polyfill.ts";export class Mv2UserBlocksHandler extends UserBlocksHandler{constructor(){super(),this.migrateBlockedItems()}async migrateBlockedItems(){const e=await simpleStorageGet("blockedItems");if(!e)return;const t=[{domain:"*",blockUrls:e,xpath:""}];return await this.importBlockedItems(t),await chrome.storage.local.remove("blockedItems"),t}async importBlockedItems(e){return super.importBlockedItems(e)}async blockItem(e){console.debug("MV2 UserBlocksHandler: Blocking item",{item:e}),this.CACHE||(this.CACHE=new Map);const t=this.CACHE.get(e.domain)||[],s=t.find((t=>t.xpath.toUpperCase()===e.xpath.toUpperCase()));s?s.blockUrls=Array.from(new Set([...s.blockUrls,...e.blockUrls])):t.push({blockUrls:e.blockUrls,xpath:e.xpath}),this.CACHE.set(e.domain,t),await this.saveBlockedItems()}async getBlockedItems(){return super.getBlockedItems()}async loadSavedBlockedItems(){return super.loadSavedBlockedItems()}async saveBlockedItems(){return super.saveBlockedItems()}async deleteBlockedItem(e){return super.deleteBlockedItem(e)}async deleteAllBlockedItems(){return super.deleteAllBlockedItems()}isBlocked(e,t){return super.isBlocked(e,t)}}