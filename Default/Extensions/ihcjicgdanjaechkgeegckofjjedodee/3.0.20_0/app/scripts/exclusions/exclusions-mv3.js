import{chrome}from"../../../utils/polyfill.ts";import{MV2ExclusionHandler}from"./exclusions-mv2";import{EXCLUSION_ADS,EXCLUSION_MALWARE,EXCLUSION_SCAMS}from"../app-consts";import{allResourceTypes,DYNAMIC_RULE_ADS_PRIORITY,DYNAMIC_RULE_ALL_PRIORITY,DYNAMIC_RULE_TEMPORARY_PRIORITY,DYNAMIC_RULE_MALWARE_PRIORITY,getExistingDynamicRulesByActionTypes,getExistingDynamicRules,getExistingSessionRules,getLastDynamicRuleId,getLastSessionRuleId,mainFrameResourceType,DYNAMIC_RULE_SCAMS_PRIORITY,allSupportedResourceTypes}from"../mv3/dynamic-rule-utils";import{handleExcludedHost}from"@/app/scripts/app.js";export class MV3ExclusionHandler extends MV2ExclusionHandler{constructor(){super(),this.TEMPORARY_EXCLUSIONS={},this.loadTemporaryExclusions()}extractExclusions(e){return Array.isArray(e)?e:e.split(",")}exportExclusions(){return{}}async importExclusions(e){for(let i=0;i<Object.keys(e).length;i++){const t=Object.keys(e)[i],s=await this.exclude_mapIntsToExclusions(e[t]);await handleExcludedHost(t,s,!0,(e=>{if(e.error)throw console.error("Error adding exclusion: ",e.error),new Error("Error adding exclusion: ",e.error);console.log("Exclusion added successfully: ",e)}))}}getPriorityForExclusions(e){let i,t=DYNAMIC_RULE_ALL_PRIORITY;return e?(i=Array.isArray(e)?e:e.split(","),1==i.length&&i.includes(EXCLUSION_ADS)?t=DYNAMIC_RULE_ADS_PRIORITY:1==i.length&&i.includes(EXCLUSION_MALWARE)?t=DYNAMIC_RULE_MALWARE_PRIORITY:1==i.length&&i.includes(EXCLUSION_SCAMS)&&(t=DYNAMIC_RULE_SCAMS_PRIORITY),t):t}async exclude(e,i){let t;if(console.debug("MV3: EXCLUDE: ",e,i),t=Array.isArray(i)?await super.exclude(e,i.join(",")):await super.exclude(e,i),await this.whitelistRuleExistsForHost(e,i))return t;let s=await getLastDynamicRuleId();const o=this.getPriorityForExclusions(i);let n;n=o===DYNAMIC_RULE_MALWARE_PRIORITY?mainFrameResourceType:o===DYNAMIC_RULE_ADS_PRIORITY?allResourceTypes:o===DYNAMIC_RULE_SCAMS_PRIORITY?mainFrameResourceType:allResourceTypes;const r=[{id:s+1,priority:o,action:{type:"allow"},condition:{urlFilter:e,resourceTypes:n}},{id:s+2,priority:o,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[e],resourceTypes:n}},{id:s+3,priority:o,action:{type:"allowAllRequests"},condition:{requestDomains:[e],resourceTypes:mainFrameResourceType}}];return console.debug("MV3: ADD RULE: ",r),console.debug("MV3_updateDynamicRulesStart: ",(new Date).toString()),await chrome.declarativeNetRequest.updateDynamicRules({addRules:[...r],removeRuleIds:[]}),console.debug("MV3_updateDynamicRulesEnd: ",(new Date).toString()),t}async getExclusions(){const e=await super.getExclusions(),i=await this.getExistingWhitelistDynamicRules(),t=new Set;for(const e of i)e.condition.urlFilter&&"*"!==e.condition.urlFilter?t.add(e.condition.urlFilter):e.condition.initiatorDomains&&e.condition.initiatorDomains.length>0&&e.condition.initiatorDomains.forEach((e=>t.add(e)));const s=Array.from(t),o=Object.entries(e).filter((([e])=>s.includes(e)));return Object.fromEntries(o)}async getExclusions_getExclusionsByNames(e){0===Object.keys(e).length&&(e=[]);const i=await super.getExclusions_getExclusionsByNames(e);console.debug("HOSTNAMES: HOSTNAMES=",{hostNames:e,exclusions:i}),e=e.map((e=>e.toLowerCase()));const t=await this.getExistingWhitelistDynamicRules(),s=new Set;for(const i of t)i.condition.urlFilter&&e.includes(i.condition.urlFilter)?s.add(i.condition.urlFilter):i.condition.initiatorDomains&&i.condition.initiatorDomains.length>0&&i.condition.initiatorDomains.forEach((e=>s.add(e)));const o=Array.from(s),n=Object.entries(i).filter((([e])=>o.includes(e)));return Object.fromEntries(n)}async removeAllExclusions(){const e=await super.removeAllExclusions(),i=(await this.getExistingWhitelistDynamicRules()).map((e=>e.id));return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...i]}),e}async removeExclude(e,i,t){console.debug("REMOVE EXCLUSIONS: ",{host:e,exclusions:i,addOverride:t});const s=await super.removeExclude(e,i,t);console.debug("REMOVE EXCLUSIONS RESULT_0: ",s);const o=await this.getExistingWhitelistDynamicRules(),n=[];for(const t of o)this._whitelistRuleAffectsHost(t,e)&&t.priority===this.getPriorityForExclusions(i)&&n.push(t.id);await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...n]});const r=await this.getExistingWhitelistDynamicRules();return console.debug("REMAINING WL DYNAMIC RULES: ",r),s}async removeExclusions(e){const i=await super.removeExclusions(e);console.debug("REMOVE EXCLUSIONS RESULT_1: ",i);const t=await this.getExistingWhitelistDynamicRules(),s=[];for(const i of t)this._whitelistRuleAffectsHost(i,e)&&s.push(i.id);return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...s]}),i}async loadTemporaryExclusions(){const e=await getExistingSessionRules();for(const i of e)if(i.condition.initiatorDomains&&i.condition.tabIds)for(const e of i.condition.tabIds)this.TEMPORARY_EXCLUSIONS[e]=i.condition.initiatorDomains}async excludeTemporarily(e,i){if(await this.whitelistRuleExistsForHost(e))return void console.debug("EXCLUDE_TEMP: WHITELIST RULE EXISTS FOR HOST: ",{host:e});i=+i;let t=await getLastSessionRuleId();console.debug("EXCLUDE_TEMP: TABID: ",{tabId:i});const s=[{id:t+1,priority:DYNAMIC_RULE_TEMPORARY_PRIORITY,action:{type:"allow"},condition:{urlFilter:e,resourceTypes:allResourceTypes,tabIds:[i]}},{id:t+2,priority:DYNAMIC_RULE_TEMPORARY_PRIORITY,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[e],resourceTypes:allResourceTypes,tabIds:[i]}}];console.debug("MV3: ADD RULE: ",s),await chrome.declarativeNetRequest.updateSessionRules({addRules:[...s],removeRuleIds:[]}),this.TEMPORARY_EXCLUSIONS[i]?this.TEMPORARY_EXCLUSIONS[i]=Array.from(new Set([...this.TEMPORARY_EXCLUSIONS[i],e])):this.TEMPORARY_EXCLUSIONS[i]=[e]}isTemporarilyExcluded(e,i){return!!this.TEMPORARY_EXCLUSIONS[i]&&this.TEMPORARY_EXCLUSIONS[i].includes(e)}_whitelistRuleAffectsHost(e,i){return!(!e.condition.urlFilter||e.condition.urlFilter!==i)||!!(e.condition.initiatorDomains&&e.condition.initiatorDomains.length>0&&e.condition.initiatorDomains.includes(i))||!!(e.condition.requestDomains&&e.condition.requestDomains.length>0&&e.condition.requestDomains.includes(i))}async whitelistRuleExistsForHost(e,i){const t=await this.getExistingWhitelistDynamicRules();for(const s of t)if(this._whitelistRuleAffectsHost(s,e)&&s.priority===this.getPriorityForExclusions(i))return!0;return!1}async getExistingWhitelistDynamicRules(){return getExistingDynamicRulesByActionTypes(["allow","allowAllRequests"],[DYNAMIC_RULE_ADS_PRIORITY,DYNAMIC_RULE_MALWARE_PRIORITY,DYNAMIC_RULE_SCAMS_PRIORITY,DYNAMIC_RULE_ALL_PRIORITY])}async addIndividualExclusion(e){let i=await getLastDynamicRuleId();const{host:t,priority:s,tracker:o}=e,n={id:++i,priority:s,action:{type:"allow"},condition:{initiatorDomains:[t],urlFilter:`||${o}^`,resourceTypes:allSupportedResourceTypes()}};console.debug("MV3: ADDING GRANULAR ALLOW RULE: ",n),await chrome.declarativeNetRequest.updateDynamicRules({addRules:[n],removeRuleIds:[]})}async removeIndividualExclusion(e){const{host:i,priority:t,tracker:s}=e,o=(await getExistingDynamicRules(t)).filter((e=>e?.condition?.initiatorDomains.includes(i)&&e?.condition?.urlFilter===`||${s}^`)).map((e=>e.id));console.debug("MV3: REMOVING GRANULAR ALLOW RULE ID: ",o,e),await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:o})}getExclusionsSnapshot(){return this.EXCLUSIONS}}