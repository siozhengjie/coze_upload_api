{"version":3,"file":"offscreen.js","mappings":"kmBAGKA,QAAWC,UACZC,OAAOF,OAASA,QAAUE,OAAOF,QAAUE,OAAOD,UAG3BD,QAAUE,OAAOF,QAAQG,QAAQC,OAAO,ICHnEJ,OAAOG,QAAQE,UAAUC,aAEzBC,eAA8BC,EAASC,EAASC,GAE5C,MAAuB,cAAnBF,EAAQG,SAIS,iBAAjBH,EAAQI,OAYgBC,EAXLX,OAAOY,WAAW,gCAAgCC,QAazEf,OAAOG,QAAQa,YAAY,CACvBJ,KAbiB,wBAcjBD,OAAQ,aACRE,OACAI,WAAW,KAfJ,IASf,IAAgCJ,CALhC","sources":["webpack://browser-guard/./configure-webpack.js","webpack://browser-guard/./guard-app/offscreen/offscreen.js"],"sourcesContent":["/* eslint-disable no-undef, camelcase */\n\n// bow: https://gist.github.com/thejohnfreeman/563337119e20d090ea2d22bee9b05a6b\nif (!chrome && !browser) {\n    window.chrome = chrome || window.chrome || window.browser;\n}\n\n__webpack_public_path__ = (chrome || window.chrome).runtime.getURL('');\n","// Registering this listener when the script is first executed ensures that the\n// offscreen document will be able to receive messages when the promise returned\n// by `offscreen.createDocument()` resolves.\n// eslint-disable-next-line no-undef\nchrome.runtime.onMessage.addListener(handleMessages);\n\nasync function handleMessages(message, _sender, _callback) {\n    // Return early if this message isn't meant for the offscreen document.\n    if (message.target !== 'offscreen') {\n        return false;\n    }\n\n    if (message.type === 'is-dark-mode') {\n        const isDarkMode = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        sendToBackground('is-dark-mode-response', isDarkMode);\n        return true;\n    }\n\n    return true;\n}\n\n// TODO: figure out a way to get a long runing offscreen script to be able to listen for changes\n// in the offscreen script and send messages to the background script\n\nfunction sendToBackground(type, data) {\n    // eslint-disable-next-line no-undef\n    chrome.runtime.sendMessage({\n        type,\n        target: 'background',\n        data,\n        offscreen: true,\n    });\n}\n"],"names":["chrome","browser","window","runtime","getURL","onMessage","addListener","async","message","_sender","_callback","target","type","data","matchMedia","matches","sendMessage","offscreen"],"sourceRoot":""}