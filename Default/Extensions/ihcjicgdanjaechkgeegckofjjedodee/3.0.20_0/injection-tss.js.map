{"version":3,"file":"injection-tss.js","mappings":"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","sources":["webpack://browser-guard/./guard-app/app/scripts/tss-setup.js","webpack://browser-guard/./guard-app/app/scripts/injection-tss.js"],"sourcesContent":["export const SetTss = (nonce, isRepeatedFunc, funcCtx) => {\n\n    console.debug(`${funcCtx} TSS: hosted page injected`);\n    console.debug(`${funcCtx} MBTSS: Nonce: `, nonce);\n\n    // hook functions\n    let detected = false;\n    let excluded = false;\n    let lastHistoryData = {};\n    let lastPrintData = {};\n    let lastCreateURLData = {};\n    let lastNotificationData = {};\n\n    function setHook({object, f, subtype, detectFunc, proxy = passthru, isBrowserlocker = true}) {\n        let originalFunc = object[f];\n        object[f] = function() {\n            if (detected && !excluded && isBrowserlocker) {\n                throw new Error('Breaking Browser Locker Behavior detected'); // Forces a failure of the original Function\n            }\n            let parameters = [].slice.call(arguments);\n            if (!excluded && detectFunc(parameters)) {\n                detected = true;\n            }\n            if (detected && !excluded) {\n                notify(subtype, parameters);\n            }\n            if (detected && !excluded && isBrowserlocker) {\n                throw new Error('Breaking Browser Locker Behavior detected'); // Forces a failure of the original Function\n            }\n            return proxy(originalFunc, this, parameters);\n        };\n    }\n\n    function notify(subtype, parameters) {\n        window.top.postMessage(JSON.parse(JSON.stringify({type: 'scam', subtype, parameters, nonce})), \"*\" );\n    }\n\n    function passthru( originalFunc, object, parameters ) {\n        return originalFunc.apply( object, parameters );\n    }\n\n\n    function isRepeated(data, interval, threshold) {\n        return isRepeatedFunc(data, interval, threshold);\n    }\n\n    function onPrint(_parameters) {\n        console.debug(\"TSS: caught print\");\n        return isRepeated(lastPrintData, 10000, 3);\n    }\n\n    function onHistoryPush(parameters) {\n        console.debug(\"TSS: Counted history being pushed\");\n        return onHistory(parameters);\n    }\n\n    function onHistoryReplace(parameters) {\n        console.debug(\"TSS: Counted history being replaced\");\n        return onHistory(parameters);\n    }\n\n    function onHistory( _parameters ) {\n        console.debug( \"TSS: Caught history\" );\n        // detect if >= 500 repeated history modifications within 1 second\n        return isRepeated( lastHistoryData, 1000, 500 );\n    }\n\n    function onWebstore( _parameters ) {\n        console.debug( \"TSS: Caught webstore install\" );\n        return true;\n    }\n\n    function onCreateURL( _parameters ) {\n        console.debug( \"TSS: Caught create URL\" );\n        // detect if >= 500 repeated URL creations within 1 second\n        return isRepeated( lastCreateURLData, 1000, 500 );\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function onInstallXPI( _parameters ) {\n        console.debug( \"TSS: Caught install XPI\" );\n        return true;\n    }\n\n    function onNotification( _parameters ) {\n        console.debug( \"TSS: Caught notification permission request\" );\n        return isRepeated( lastNotificationData, 5000, 2 );\n    }\n\n    // set hooks\n    setHook({object: window, f: \"print\", subtype: \"printLoop\", detectFunc: onPrint});\n    setHook({object: window.history, f: \"pushState\", subtype: \"historyLoop\", detectFunc: onHistoryPush});\n    window.setTimeout(function() {\n        setHook(\n            {object: window.history, f: \"replaceState\", subtype: \"historyLoop\", detectFunc: onHistoryReplace}\n        );\n    }, 2000);\n\n    setHook({object: URL, f: \"createObjectURL\", subtype: \"createURLLoop\", detectFunc: onCreateURL});\n\n    if (window.chrome && window.chrome.webstore) {\n        setHook({\n            // eslint-disable-next-line no-undef\n            object: chrome.webstore,\n            f: \"install\",\n            subtype: \"extensionInstall\",\n            detectFunc: onWebstore,\n            isBrowserlocker: false\n        });\n    }\n\n    if (window.Notification) {\n        setHook({\n            object: window.Notification,\n            f: \"requestPermission\",\n            subtype: \"notificationLoop\",\n            detectFunc: onNotification,\n            isBrowserlocker: false\n        });\n    }\n\n    // listen for exclusions notifications\n    window.addEventListener( \"message\",\n        function( event ) {\n            if ( event.source === window && event.data.nonce === nonce ) {\n                if ( event.data.type === \"exclude\" ) {\n                    excluded = true;\n                }\n            }\n        }, false\n    );\n};\n","import { SetTss } from './tss-setup.js';\n\nconst SearchParams = new URLSearchParams(document.currentScript.src.split('?')[1]);\nconst MbTssNonce = SearchParams.get('nonce');\nconst CTX = 'injection-tss';\nconst IsRepeatedFunc = (data, interval, threshold) => {\n    console.debug(\n        `TSS: Checking if repeated ${threshold} times for interval ${interval} against data: `,\n        data\n    );\n    // return true if >= N occurrences in interval (milliseconds)\n    const thisTime = Date.now();\n    if (data.lastTime) {\n        let thisInterval = thisTime - data.lastTime;\n        if (thisInterval < interval) {\n            data.lastCount++;\n            if (data.lastCount >= threshold) {\n                return true;\n            }\n        } else {\n            data.lastTime = thisTime;\n            data.lastCount = 1;\n        }\n    } else if (threshold === 1) {\n        data.lastTime = thisTime;\n        data.lastCount = 1;\n        return true;\n    } else {\n        data.lastTime = thisTime;\n        data.lastCount = 1;\n    }\n    return false;\n};\n\nSetTss(MbTssNonce, IsRepeatedFunc, CTX);\n"],"names":["SetTss","nonce","isRepeatedFunc","funcCtx","console","debug","detected","excluded","lastHistoryData","lastPrintData","lastCreateURLData","lastNotificationData","setHook","object","f","subtype","detectFunc","proxy","passthru","isBrowserlocker","originalFunc","Error","parameters","slice","call","arguments","window","top","postMessage","JSON","parse","stringify","type","notify","this","apply","isRepeated","data","interval","threshold","IsRepeatedFunc","thisTime","Date","now","lastTime","lastCount","onHistoryReplace","onHistory","_parameters","history","setTimeout","URL","chrome","webstore","Notification","addEventListener","event","source","URLSearchParams","document","currentScript","src","split","get"],"sourceRoot":""}