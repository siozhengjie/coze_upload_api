{"version":3,"file":"firefox-import.js","mappings":"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","sources":["webpack://browser-guard/./configure-webpack.js","webpack://browser-guard/./guard-app/utils/polyfill.ts","webpack://browser-guard/./guard-app/utils/locales.ts","webpack://browser-guard/./guard-app/app/scripts/app-consts.js","webpack://browser-guard/./guard-app/app/scripts/include-export.js","webpack://browser-guard/./guard-app/app/scripts/firefox-import.js","webpack://browser-guard/./guard-app/app/scripts/ui-utils/ui-utils.js"],"sourcesContent":["/* eslint-disable no-undef, camelcase */\n\n// bow: https://gist.github.com/thejohnfreeman/563337119e20d090ea2d22bee9b05a6b\nif (!chrome && !browser) {\n    window.chrome = chrome || window.chrome || window.browser;\n}\n\n__webpack_public_path__ = (chrome || window.chrome).runtime.getURL('');\n","// Define a unified type\ntype PolyBrowser = typeof chrome & typeof browser;\n\n// Set the global context to the window object if it exists, otherwise use self\nconst GLOBAL_CONTEXT = typeof window !== 'undefined' ? window : self;\n\n// Create a polyBrowser object\nconst polyBrowser: PolyBrowser = (GLOBAL_CONTEXT as any).chrome || GLOBAL_CONTEXT.browser || browser;\n\n// debug what user agent is being used and what is the browser\n\nlet idb: IDBFactory;\ntry {\n  idb = indexedDB || GLOBAL_CONTEXT.indexedDB;\n} catch (error:any) {\n  console.log(`Error initializing indexedDB: ${error.message}`);\n}\n\nconst performancePoly = performance || GLOBAL_CONTEXT.performance;\nconst URLPoly = URL || GLOBAL_CONTEXT.URL;\n\nexport {\n  polyBrowser as chrome,\n  idb as indexedDB,\n  performancePoly as performance,\n  URLPoly as URL,\n};\n","import { chrome } from \"@/utils/polyfill\";\n\nexport const uiLanguage = chrome.i18n.getUILanguage().split(\"-\")[0];\n\n/**\n * Finds an element by ID and replaces its text with the appropriate internationalized string\n * @param {Array<{id: String, msg: String, sub: String}>} nodes - `id` corresponds to the dom element's ID | `msg` corresponds to the appropriate translation name in messages.json | `sub` is any substitution text\n * @param {HTMLElement} dom - (optional) the document to find the element in [defaults to `document`]\n * @returns {void}\n */\nexport const translateText = (\n  nodes: Array<{ id: string; msg: string; sub?: string }>,\n  dom: Document = document\n): void =>\n  nodes.forEach(({ id, msg, sub = null }) => {\n    const element = dom.getElementById(id);\n    element &&\n      (element.textContent = chrome.i18n.getMessage(msg, sub || undefined));\n  });\n\n\n/**\n * @param {String} key The key to translate\n * @param {string | undefined} sub The substitution text\n * @returns {String} The translated string\n */\nexport function translateSimpleText(\n  key: string,\n  sub: string | undefined = undefined\n): string {\n  return chrome.i18n.getMessage(key, sub);\n}","export const RELOAD_ON_CLOSE_PORT = 'RELOAD_ON_CLOSE_PORT';\nexport const MSG_ICON_REFRESH = 'MSG_ICON_REFRESH';\nexport const MSG_ICONS_REFRESH = 'MSG_ICONS_REFRESH';\n\nexport const EXCLUSION_MALWARE = 'EXCLUSION_MALWARE';\nexport const EXCLUSION_SCAMS = 'EXCLUSION_SCAMS';\nexport const EXCLUSION_ADS = 'EXCLUSION_ADS';\nexport const EXCLUSION_PUPS = 'EXCLUSION_PUPS';\nexport const EXCLUSION_TYPE_DOMAIN = 'domain';\nexport const GDPR_REMOVAL_FLAG = 'GDPR_REMOVAL_FLAG';\nexport const EXCLUSION_TYPE_DOMAIN_TEMPORARY = 'domain (temporary)';\nexport const BAD_PACKAGE_ERROR = \"BAD_PACKAGE_ERROR\"\nexport const MISSING_DATABASE_ERROR = \"MISSING_DATABASE_ERROR\"\nexport const LICENSE_FREE = 'LICENSE_FREE';\nexport const LICENSE_TRIAL = 'LICENSE_TRIAL';\nexport const LICENSE_PREMIUM = 'LICENSE_PREMIUM';\nexport const LICENSE_STATE_ENUM = Object.freeze({\n    LicenseStateUnknown: 0,\n    LicenseStateFree: 1,\n    LicenseStateTrial: 2,\n    LicenseStateTrialExpired: 3,\n    LicenseStateLicensed: 4,\n    LicenseStateLicenseExpired: 5,\n    LicenseStateLicenseGrace: 6\n});\nexport const PREMIUM_LICENSE_STATES = Object.freeze([2, 4, 6]);\nexport const SETTING_TELEMETRY_CONSENT = 'sendTelemetry';\nexport const SETTING_ADS = 'enableProtectionAds';\nexport const SETTING_GTLD = 'enableProtectionGtld';\nexport const SETTING_NATIVE_MESSAGING = 'enableNativeMessaging';\nexport const SETTING_MALWARE = 'enableProtectionMalware';\nexport const SETTING_SCAMS = 'enableProtectionScams';\nexport const SETTING_BLOCK_COUNT = 'enableBlockCountDisplay';\nexport const SETTING_KILLSWITCH = 'enableProtection';\nexport const SETTING_SKIMMER_PROTECTION = 'enableSkimmerProtection';\nexport const SETTING_VERBOSE_LOGGING = 'enableVerboseLogging';\nexport const SETTING_MONTHLY_NOTIFICATION = 'enableMonthlyNotification';\nexport const SETTING_MALICIOUS_NOTIFICATION = 'enableMaliciousNotification';\nexport const SETTING_BREACH_NOTIFICATION = 'enableBreachNotification';\nexport const SETTING_NEW_RELEASE_NOTIFICATION = 'enableNewReleaseNotification';\nexport const SETTING_SEARCH_HIJACKING_NOTIFICATION = 'enableSearchHijackingNotification';\nexport const SETTING_VISUAL_DEBUGGING = 'enableVisualDebugging';\nexport const SETTING_PING_TRACKER_REMOVER = 'enablePingTrackerRemover';\n\nexport const SETTING_FLAGS = {\n    [SETTING_KILLSWITCH]: 0x00000002, // Overall Protection status\n    [SETTING_ADS]: 0x00000004, // Ads/Trackers\n    [SETTING_MALWARE]: 0x00000008, // Malware\n    [SETTING_SCAMS]: 0x00000010, // Scams\n};\nexport const ALLOWED_EXCLUSION_OPTIONS = [\n    {\n        value: 2,\n        constantKey: EXCLUSION_ADS,\n        humanReadable: \"Ads / Trackers\"\n    },\n    {\n        value: 4,\n        constantKey: EXCLUSION_MALWARE,\n        humanReadable: \"Malware\"\n    },\n    {\n        value: 6,\n        constantKey: EXCLUSION_SCAMS,\n        humanReadable: \"Scams\"\n    },\n    {\n        value: 7,\n        constantKey: EXCLUSION_PUPS,\n        //Do not display PUPs label anymore\n        humanReadable: \"\"\n    }\n];\n\nexport const RELEASE_NOTIFICATION_DEAFULT_TEXT = 'Browser Guard has been updated!';\n\n//Change manually these release notes (current notes of v2.6.26)\nexport const RELEASE_NOTIFICATION_NOTES = [\n    'New release notifications',\n    'Auto deny GDPR consent trackers',\n    'Misc bug fixes'\n]\n\n//Change manually these release notes \nexport const RELEASE_NOTIFICATION_NOTES_MV3 = [\n    'Improve Heuristic protection',\n    'Improve Search Hijacking protection',\n    'Misc bug fixes' // this should always exist and be the last one.\n];\n\n\n// Feature flags that are enabled/disabled by the FEATURE_FLAGS DB\nexport const FLAG_ENABLE_BLOCK_EASYLIST_ADS = 'enableBlockEasylistAds';\nexport const FLAG_ENABLE_BLOCK_GDPR = 'enableBlockGdpr';\nexport const FLAG_ENABLE_BLOCK_LOCAL_PORT_SCANNING = 'enableBlockLocalPortScanning';\nexport const FLAG_ENABLE_BLOCK_YOUTUBE_CUSTOM_ADS = 'enableBlockYoutubeCustomAds';\nexport const FLAG_ENABLE_BREACH_NOTIFICATION = 'enableBreachNotification';\nexport const FLAG_ENABLE_SEARCH_HIJACKING_NOTIFICATION = 'enableSearchHijackingNotification';\nexport const FLAG_ENABLE_HEURISTIC_BLOCKING = 'enableHeuristicBlocking';\nexport const FLAG_ENABLE_SUSPICIOUS_POST_OR_PUT_DETECTION = 'enableSuspiciousPostOrPutDetection';\nexport const FLAG_ENABLE_SUSPICIOUS_TITLE_DETECTION = 'enableSuspiciousTitleDetection';\nexport const FLAG_ENABLE_PING_TRACKER_REMOVER = 'enablePingTrackerRemover';\n\nexport const FLAG_ENABLE_PREMIUM = 'FLAG_ENABLE_PREMIUM';\nexport const UPDATE_DB_MAX_ATTEMPS = 4;\n\nexport const MSG_FIREFOX = 'MSG_FIREFOX';\nexport const MSG_UUID_GET = 'MSG_UUID_GET';\nexport const MSG_INT_VER = 'MSG_INT_VER';\nexport const MSG_USER_GROUP_GET = 'MSG_USER_GROUP_GET';\nexport const MSG_IS_ONBOARDING_COMPLETE = 'MSG_IS_ONBOARDING_COMPLETE';\nexport const MSG_WEBSITE_CHECKBOX_GET = 'MSG_WEBSITE_CHECKBOX_GET';\nexport const MSG_SETTINGS_GET = 'MSG_SETTINGS_GET';\nexport const MSG_SETTINGS_SET = 'MSG_SETTINGS_SET';\nexport const MSG_IS_PREMIUM = 'MSG_IS_PREMIUM';\nexport const MSG_IS_TRIAL = 'MSG_IS_TRIAL';\nexport const MSG_TAB_DATA_GET = 'MSG_TAB_DATA_GET';\nexport const MSG_RECORDS_GET = 'MSG_RECORDS_GET';\nexport const MSG_GET_ALL_STATS = 'MSG_GET_ALL_STATS';\nexport const MSG_DEBUG_ADD_STATS = 'MSG_DEBUG_ADD_STATS';\nexport const MSG_DEBUG_CLEAR_STATS = 'MSG_DEBUG_CLEAR_STATS';\nexport const MSG_ADD_ALLOW = 'MSG_ADD_ALLOW';\nexport const MSG_SET_ALLOW_GRANULAR = 'MSG_SET_ALLOW_GRANULAR';\nexport const MSG_GET_ALLOW_GRANULAR = 'MSG_GET_ALLOW_GRANULAR';\nexport const MSG_ADD_ALLOW_TEMPORARY = 'MSG_ADD_ALLOW_TEMPORARY';\nexport const MSG_ALLOW_TEMPORARILY = 'MSG_ALLOW_TEMPORARILY';\nexport const MSG_ADD_ALLOW_META_ONLY = 'MSG_ADD_ALLOW_META_ONLY';\nexport const MSG_REM_ALLOW_ALL = 'MSG_REM_ALLOW_ALL';\nexport const MSG_REM_ALLOW_DOMAIN = 'MSG_REM_ALLOW_DOMAIN';\nexport const MSG_REM_ALLOW_SINGLE = 'MSG_REM_ALLOW_SINGLE';\nexport const MSG_ALLOW_GET_ALL = 'MSG_ALLOW_GET_ALL';\nexport const MSG_ALLOW_GET_SINGLE = 'MSG_ALLOW_GET_SINGLE';\nexport const MSG_IS_LAYER_ACTIVE = 'MSG_IS_LAYER_ACTIVE';\nexport const MSG_DOWNLOAD_LOGS = 'MSG_DOWNLOAD_LOGS';\nexport const MSG_FORCE_DATABASE_UPDATE = 'MSG_FORCE_DATABASE_UPDATE';\nexport const MSG_TAB_ID_GET = 'MSG_TAB_ID_GET';\nexport const MSG_TAB_INFO_GET = 'MSG_TAB_INFO_GET';\nexport const MSG_GET_HEURISTICS_DATABASE = \"MSG_GET_HEURISTICS_DATABASE\";\nexport const MSG_IS_NEEDING_NATIVE_MSG = 'MSG_IS_NEEDING_NATIVE_MSG';\nexport const MSG_TOGGLE_NATIVE_MSG = 'MSG_TOGGLE_NATIVE_MSG';\nexport const MSG_BADGE_COUNT_UPDATE = 'MSG_BADGE_COUNT_UPDATE';\nexport const MSG_RECORD_ARW = 'MSG_RECORD_ARW';\nexport const MSG_IS_AD_PROTECTION_ACTIVE = 'MSG_IS_AD_PROTECTION_ACTIVE';\nexport const MSG_GET_BLOCKED_ITEMS = 'MSG_GET_BLOCKED_ITEMS';\nexport const MSG_DELETE_BLOCKED_ITEM = 'MSG_DELETE_BLOCKED_ITEM';\nexport const MSG_DELETE_ALL_BLOCKED_ITEMS = 'MSG_DELETE_ALL_BLOCKED_ITEMS';\nexport const MSG_TELEMETRY_EMAIL_SHOWN = 'MSG_TELEMETRY_EMAIL_SHOWN';\nexport const MSG_TELEMETRY_EMAIL_SENT = 'MSG_TELEMETRY_EMAIL_SENT';\nexport const MSG_TELEMETRY_EMAIL_FAILED = 'MSG_TELEMETRY_EMAIL_FAILED';\nexport const MSG_MV3_LAST_TAB_URL = 'MSG_MV3_LAST_TAB_URL';\nexport const PORT_FORCE_DATABASE_UPDATE = 'PORT_FORCE_DATABASE_UPDATE';\nexport const GROUP_A = 'GROUP_A';\nexport const MSG_RESET = 'MSG_RESET';\nexport const MSG_RECORD_CONTENT_AD = 'MSG_RECORD_CONTENT_AD';\nexport const MSG_RECORD_EASYLIST_AD = 'MSG_RECORD_EASYLIST_AD';\nexport const MSG_RECORD_EASYLIST_PRIVACY = 'MSG_RECORD_EASYLIST_PRIVACY';\nexport const MSG_MV3_TOGGLE_PROTECTION = 'MSG_MV3_TOGGLE_PROTECTION';\nexport const MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION = 'MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION';\nexport const MSG_MV3_TOGGLE_GTLD_PROTECTION = 'MSG_MV3_TOGGLE_GTLD_PROTECTION';\nexport const MV3_PROTECTION_ADS = 'MV3_ADS';\nexport const MV3_PROTECTION_MALWARE = 'MV3_MALWARE';\nexport const MV3_PROTECTION_SCAMS = 'MV3_SCAMS';\nexport const SETTING_MV3_ENABLED_FEATURES = 'MV3_ENABLED_FEATURES';\nexport const MV3_FEATURE_ALL = 'MV3_FEATURE_ALL';\nexport const MV3_FEATURE_ADS_TRACKERS = 'ADS_TRACKERS';\nexport const MV3_FEATURE_EASYLIST = 'EASYLIST';\nexport const MV3_FEATURE_EASYLIST_PRIVACY = 'EASYLIST_PRIVACY';\nexport const MV3_FEATURE_MALWARE = 'MALWARE';\nexport const MV3_FEATURE_MONTHLY_NOTIFICATIONS = 'MONTHLY_NOTIFICATIONS ';\nexport const MV3_FEATURE_MALICIOUS_NOTIFICATIONS = 'MALICIOUS_NOTIFICATIONS';\nexport const MV3_FEATURE_NEW_RELEASE_NOTIFICATIONS = 'NEW_RELEASE_NOTIFICATIONS';\nexport const MV3_FEATURE_BREACH_NOTIFICATIONS = 'BREACH_NOTIFICATIONS';\nexport const MV3_FEATURE_SEARCH_HIJACKING_NOTIFICATIONS = 'SEARCH_HIJACKING_NOTIFICATIONS';\nexport const MSG_BREACH_NOTIFICATION = 'MSG_BREACH_NOTIFICATION';\nexport const MSG_MV3_INIT_WITH_IDS = 'MSG_MV3_INIT_WITH_IDS';\nexport const MSG_MV3_POST_NATIVE_EXCLUSION = 'MSG_MV3_POST_NATIVE_EXCLUSION';\nexport const MSG_INFO_BLOCKED_CONTENT = 'MSG_INFO_BLOCKED_CONTENT';\nexport const MSG_INFO_BLOCKED_CONTENT_DISPLAYED = 'MSG_INFO_BLOCKED_CONTENT_DISPLAYED';\nexport const MSG_INFO_BREACH_NOTIFICATION_DISPLAYED = 'MSG_INFO_BREACH_NOTIFICATION_DISPLAYED';\nexport const MSG_INFO_MONTHLY_NOTIFICATION = 'MSG_INFO_MONTHLY_NOTIFICATION';\nexport const MSG_INFO_RELEASE_NOTIFICATION = 'MSG_INFO_RELEASE_NOTIFICATION';\nexport const MSG_TOGGLE_VERBOSE_LOGGING = 'MSG_TOGGLE_VERBOSE_LOGGING';\nexport const MSG_CONTENT_CONTROL_GET_ALL = 'MSG_CONTENT_CONTROL_GET_ALL';\nexport const MSG_CONTENT_CONTROL_REMOVE_ITEM = 'MSG_CONTENT_CONTROL_REMOVE_ITEM';\nexport const MSG_CONTENT_CONTROL_ADD_ITEM = 'MSG_CONTENT_CONTROL_ADD_ITEM';\nexport const MSG_CONTENT_CONTROL_REMOVE_ALL = 'MSG_CONTENT_CONTROL_REMOVE_ALL';\nexport const MSG_DETECTION_HISTORY_GET_ALL = 'MSG_DETECTION_HISTORY_GET_ALL';\nexport const MSG_DETECTION_HISTORY_ADD_ITEM = 'MSG_DETECTION_HISTORY_ADD_ITEM';\nexport const MSG_DETECTION_HISTORY_REMOVE_ALL = 'MSG_DETECTION_HISTORY_REMOVE_ALL';\nexport const MSG_DETECTION_HISTORY_REMOVE_ITEM = 'MSG_DETECTION_HISTORY_REMOVE_ITEM';\nexport const MSG_IS_NEW_FEATURE_SEEN = 'MSG_IS_NEW_FEATURE_SEEN';\nexport const MSG_MARK_NEW_FEATURE_SEEN = 'MSG_MARK_NEW_FEATURE_SEEN';\nexport const FEAT_CONTENT_CONTROLS = 'contentControls';\nexport const FEAT_EXPORT_IMPORT = 'exportImport';\nexport const MSG_EXPORT_SETTINGS = 'MSG_EXPORT_SETTINGS';\nexport const MSG_IMPORT_SETTINGS = 'MSG_IMPORT_SETTINGS';\nexport const MSG_IS_WHITELISTED_SCAM = 'MSG_IS_WHITELISTED_SCAM';\nexport const MSG_DEBUG_TEST_CHANNEL = 'MSG_DEBUG_TEST_CHANNEL';\nexport const MSG_DEBUG_CHECK_URL = 'MSG_DEBUG_CHECK_URL';\nexport const MSG_DEBUG_ADD_HEURISTIC_RULE = 'MSG_DEBUG_ADD_HEURISTIC_RULE';\nexport const MSG_DEBUG_STAGING_CHANNEL = 'MSG_DEBUG_STAGING_CHANNEL';\nexport const MSG_DEBUG_STAGING_CHANNEL_RESPONSE = 'MSG_DEBUG_STAGING_CHANNEL_RESPONSE';\nexport const MSG_DEBUG_UPDATE_ERROR = 'MSG_DEBUG_UPDATE_ERROR';\nexport const MSG_COLOR_SCHEME_CHANGED = 'MSG_COLOR_SCHEME_CHANGED';\nexport const MSG_QUERY_FEATURE_FLAG = 'MSG_QUERY_FEATURE_FLAG';\nexport const MSG_LOAD_INLINE_SCRIPT = 'MSG_LOAD_INLINE_SCRIPT';\nexport const MSG_GET_EASYLIST_SELECTORS = 'MSG_GET_EASYLIST_SELECTORS';\nexport const MSG_GET_HEURISTICS_URLS_TO_BLOCK = 'MSG_GET_HEURISTICS_URLS_TO_BLOCK';\nexport const MSG_QUERY_EASYLIST = 'MSG_QUERY_EASYLIST';\nexport const MSG_IS_EXCLUDED = \"isExcluded\";\nexport const MSG_DETECTION = \"detection\";\nexport const MSG_TELEMETRY_PHISHING_TUNNEL = \"telemetryPhishingTunnel\";\nexport const MSG_CONTEXT_MENU_TARGET_URLS = \"context-menu-target-urls\";\nexport const MSG_UPDATE_PROTECTION_ON_PERM_CHANGE = \"MSG_UPDATE_PROTECTION_ON_PERM_CHANGE\";\nexport const SHOW_PERMISSION_REQUEST_ALARM = \"showPermissionRequestAlarm\";\nexport const IS_URL_PERM_REMOVED_FLAG = \"IS_URL_PERM_REMOVED_FLAG\";\nexport const MSG_CLOSE_POPUP = \"MSG_CLOSE_POPUP\";\nexport const MSG_RECORD_PING_TRACKER_REMOVAL = \"MSG_RECORD_PING_TRACKER_REMOVAL\";\nexport const MSG_CHECK_ALLOW_LIST_BY_TYPE_AND_DOMAIN = 'MSG_CHECK_ALLOW_LIST_BY_TYPE_AND_DOMAIN';\nexport const MSG_CHECK_DOMAIN_ALLOW_LIST_RESPONSE = 'MSG_CHECK_DOMAIN_ALLOW_LIST_RESPONSE';\nexport const MSG_CHECK_DOMAIN_ALLOW_LIST = 'MSG_CHECK_DOMAIN_ALLOW_LIST';\nexport const MSG_APPEND_CONSOLE_LOG = \"MSG_APPEND_CONSOLE_LOG\";\n\nexport const RecordType = {\n    AD: 'AD',\n    MALWARE: 'MALWARE',\n    SCAM: 'SCAM',\n    CONTENT: 'CONTENT',\n};\nexport const ATTRIBUTION_REPORTING = 'googleattributionreport';\nexport const HEURISTIC_AD_BLOCK = 'heuristic-ad-block';\nexport const EASYLIST_AD_BLOCK = 'easylist-ad-block';\nexport const EASYLIST_PRIVACY_BLOCK = 'easylist-privacy-block';\nexport const MSG_IS_ATTR_REPORTING_ACTIVE = 'MSG_IS_ATTR_REPORTING_ACTIVE';\nexport const MSG_IS_PING_TRACKER_REMOVER_ACTIVE = 'MSG_IS_PING_TRACKER_REMOVER_ACTIVE';\nexport const PERM_LAST_DISPLAYED_MEMORY_VAR = 'permNotificationLastDisplayed';\nexport const PING_TRACKER = 'pingtracker';\n\n\n\n/*      RESOURCE PATHES     */\nexport const RESOURCE_CONTENT_STYLE = \"app/content-style.css\";\n\n\n/*      CSS CLASSES     */\nexport const CSS_DISPLAY_NONE = 'A2O4W8X6IK';\nexport const CSS_DISPLAY_VISUAL_DEBUGGING_EL_GENERIC = 'B2O4W8X6IL'; // easylist visual debugging generic items\nexport const CSS_DISPLAY_VISUAL_DEBUGGING_EL_SPECIFIC = 'C2O4W8X6IM'; // easylist visual debugging site specific items\nexport const CSS_DISPLAY_VISUAL_DEBUGGING_HE = 'D2O4W8X6IN'; // heuristics visual debugging\nexport const CSS_GLOBAL_NOTIFICATION = 'mb-global-notification';\nexport const CSS_NOTIFICATION_INFO = 'mb-global-info';\nexport const CSS_NOTIFICATION_WARNING = 'mb-global-warning';\n\nexport const THREAT_TYPES = Object.freeze({\n    MALWARE: Object.freeze({\n        type: 'malware',\n        FULL_URL_MALWARE: 'full-url-malware',\n        SUSPICIOUS_PAGE: 'suspiciousPage',\n        SUSPICIOUS_TLD: 'suspiciousTLD',\n        RISKY_PATTERN: 'riskyPattern',\n        SUSPICIOUS_CONTENT: 'suspiciousContent',\n        MALWARE_PATTERN: 'malware-pattern',\n        ALERT_LOOP: 'alertLoop',\n        AUTH_REQUIRED_LOOP: 'authRequiredLoop',\n        CREATE_URL_LOOP: 'createURLLoop',\n        EXTENSION_INSTALL: 'extensionInstall',\n        FULL_SCREEN_LOOP: 'fullScreenLoop',\n        HISTORY_LOOP: 'historyLoop',\n        NOTIFICATION_LOOP: 'notificationLoop',\n        PRINT_LOOP: 'printLoop',\n        ADWARE: 'adware',\n        REPUTATION: 'reputation',\n        TROJAN: 'trojan',\n        MALVERTISING: 'malvertising',\n        WORM: 'worm',\n        RANSOMWARE: 'ransomware',\n        ROOTKIT: 'rootkit',\n        BACKDOOR: 'backdoor',\n        SPYWARE: 'spyware',\n        ALLOWED_EXCLUSION_VALUE: 4,\n    }),\n    SCAM: Object.freeze({\n        type: 'scam',\n        TSS: 'tss',\n        SCAM_HEURISTIC: 'scam_heuristic',\n        ALLOWED_EXCLUSION_VALUE: 6,\n\n    }),\n    PHISHING: Object.freeze({\n        type: 'phishing',\n        PHISHING_SUSPICIOUS_POST: 'phishing_suspicious_post',\n        PHISHING_BANKING: 'phishing_banking',\n        PHISHING_LOGIN: 'phishing_login',\n        PHISHING_LOGIN_VIA_TUNNEL: 'phishing_login_via_tunnel',\n        TELEMETRY_PHISHING_TUNNEL: 'telemetryPhishingTunnel',\n    }),\n    AD: Object.freeze({\n        type: 'ad',\n        ADSERVER: 'adserver',\n        ALLOWED_EXCLUSION_VALUE: 2,\n    }),\n    ADS: Object.freeze({\n        type: 'ads',\n        ADSERVER: 'adserver',\n        ALLOWED_EXCLUSION_VALUE: 2,\n    }),\n});\n\nexport const BROWSERS = Object.freeze({\n    CHROME: 'Chrome',\n    FIREFOX: 'Firefox',\n    OPERA: 'Opera',\n    EDGE: 'Edge',\n    SAFARI: 'Safari',\n});\n\nexport const DEFAULT_PERMISSIONS = Object.freeze({\n    origins: [\"<all_urls>\"],\n    permissions: [], // All permissions - to be filled.\n    optional_permissions: [] // All optional permissions - to be filled.\n});\n\n/*      ALLOWED EXPORTED SETTINGS     */\nexport const ALLOWED_EXPORTED_SETTINGS = {\n    version: \"3.0.0\",\n    allowList: {},\n    blockedItems: [],\n    contentControls: [],\n    settings: {\n        enableBlockCountDisplay: true,\n        enableMaliciousNotification: true,\n        enableMonthlyNotification: true,\n        enableNewReleaseNotification: true,\n        enableProtection: true,\n        enableProtectionAds: true,\n        enableProtectionMalware: true,\n        enableProtectionScams: true,\n        enableSkimmerProtection: true,\n        showReleaseNotificationFlag: true,\n        enableProtectionGtld: false,\n        enableVerboseLogging: false,\n    }\n}\n\n/*\n    Standard CSS selectors, the separator is ##.\n    Extended CSS pseudo-selectors, the separator is #?#.\n */\n\nexport const ruleSeparatorRegex = /^(.*?)(##|#\\?#)(.+)$/\nexport const ruleSeparatorRegexInstance = new RegExp(ruleSeparatorRegex)\n\nexport const BROWSER_PERMISSIONS = Object.freeze({\n    Chrome: Object.freeze({\n        origins: [],\n        permissions: [ // this inlcudes all permissions, required and optional\n            \"alarms\",\n            \"downloads\",\n            \"storage\",\n            \"tabs\",\n            \"declarativeNetRequest\",\n            \"declarativeNetRequestFeedback\",\n            \"unlimitedStorage\",\n            \"webRequest\",\n            \"contextMenus\",\n            \"nativeMessaging\",\n            \"offscreen\",\n            \"activeTab\",\n            \"clipboardRead\",\n            \"clipboardWrite\"\n        ]\n    }),\n    Firefox: Object.freeze({\n        origins: [],\n        permissions: [ // this inlcudes all permissions, required and optional\n            \"alarms\",\n            \"downloads\",\n            \"storage\",\n            \"tabs\",\n            \"declarativeNetRequest\",\n            \"declarativeNetRequestFeedback\",\n            \"unlimitedStorage\",\n            \"webRequest\",\n            \"webRequestBlocking\",\n            \"contextMenus\",\n            \"nativeMessaging\",\n            \"activeTab\",\n            \"clipboardRead\",\n            \"clipboardWrite\"\n        ]\n    }),\n    Edge: Object.freeze({\n        origins: [],\n        permissions: [ // this inlcudes all permissions, required and optional\n            \"alarms\",\n            \"downloads\",\n            \"nativeMessaging\",\n            \"storage\",\n            \"tabs\",\n            \"webRequest\",\n            \"declarativeNetRequest\",\n            \"declarativeNetRequestFeedback\",\n            \"unlimitedStorage\",\n            \"contextMenus\",\n            \"offscreen\",\n            \"clipboardRead\",\n            \"clipboardWrite\"\n        ]\n    }),\n    Safari: Object.freeze({\n        origins: [],\n        permissions: []\n    })\n});\n\n\n// the pruposse of this object is to have a human readable title and description for each permission\nexport const PERMISSIONS_CONTROL_CAROUSEL = Object.freeze({\n    clipboardRead: {\n        title: \"clipboardReadPermTitle\",\n        description: \"clipboardReadPermDesc\"\n    },\n    clipboardWrite: {\n        title: \"clipboardWritePermTitle\",\n        description: \"clipboardWritePermDesc\"\n    },\n    alarms: {\n        title: \"alarms\",\n        description: \"alarms\"\n    },\n    downloads: {\n        title: \"downloads\",\n        description: \"downloads\"\n    },\n    storage: {\n        title: \"storage\",\n        description: \"storage\"\n    },\n    tabs: {\n        title: \"tabs\",\n        description: \"tabs\"\n    },\n    declarativeNetRequest: {\n        title: \"declarativeNetRequest\",\n        description: \"declarativeNetRequest\"\n    },\n    declarativeNetRequestFeedback: {\n        title: \"declarativeNetRequestFeedback\",\n        description: \"declarativeNetRequestFeedback\"\n    },\n    unlimitedStorage: {\n        title: \"unlimitedStorage\",\n        description: \"unlimitedStorage\"\n    },\n    webRequest: {\n        title: \"webRequest\",\n        description: \"webRequest\"\n    },\n    contextMenus: {\n        title: \"contextMenus\",\n        description: \"contextMenus\"\n    },\n    nativeMessaging: {\n        title: \"nativeMessaging\",\n        description: \"nativeMessaging\"\n    },\n    offscreen: {\n        title: \"offscreen\",\n        description: \"offscreen\"\n    },\n    activeTab: {\n        title: \"activeTab\",\n        description: \"activeTab\"\n    },\n});\n\n// List of domains that are always allowed, even if Research deliberate tries to block them.\nexport const ALWAYS_ALLOW = {\n    'amazon.com': true, 'www.amazon.com': true,\n    'baidu.com': true, 'www.baidu.com': true,\n    'bilibili.com': true, 'www.bilibili.com': true,\n    'bing.com': true, 'www.bing.com': true,\n    'cnn.com': true, 'www.cnn.com': true,\n    'discord.com': true, 'www.discord.com': true,\n    'discordapp.com': true, 'www.discordapp.com': true,\n    'ebay.com': true, 'www.ebay.com': true,\n    'facebook.com': true, 'www.facebook.com': true,\n    'foxnews.com': true, 'www.foxnews.com': true,\n    'google.com': true, 'www.google.com': true,\n    'instagram.com': true, 'www.instagram.com': true,\n    'linkedin.com': true, 'www.linkedin.com': true,\n    'live.com': true, 'www.live.com': true,\n    'mail.ru': true, 'www.mail.ru': true,\n    'malwarebytes.com': true, 'www.malwarebytes.com': true,\n    'mbamupdates.com': true, 'www.mbamupdates.com': true,\n    'microsoft.com': true, 'www.microsoft.com': true,\n    'microsoftonline.com': true, 'www.microsoftonline.com': true,\n    'mozilla.com': true, 'www.mozilla.com': true,\n    'msn.com': true, 'www.msn.com': true,\n    'mwbsys.com': true, 'www.mwbsys.com': true, // Malwarebytes CDN\n    'naver.com': true, 'www.naver.com': true,\n    'netflix.com': true, 'www.netflix.com': true,\n    'nsslabs.com': true, 'www.nsslabs.com': true,\n    'office.com': true, 'www.office.com': true,\n    'pinterest.com': true, 'www.pinterest.com': true,\n    'qq.com': true, 'www.qq.com': true,\n    'reddit.com': true, 'www.reddit.com': true,\n    'tiktok.com': true, 'www.tiktok.com': true,\n    'twitch.tv': true, 'www.twitch.tv': true,\n    'twitter.com': true, 'www.twitter.com': true,\n    'virustotal.com': true, 'www.virustotal.com': true,\n    'vk.com': true, 'www.vk.com': true,\n    'weather.com': true, 'www.weather.com': true,\n    'whatsapp.com': true, 'www.whatsapp.com': true,\n    'wikipedia.org': true, 'www.wikipedia.org': true,\n    'windows.net': true, 'www.windows.net': true,\n    'windowsupdate.com': true, 'www.windowsupdate.com': true,\n    'yahoo.co.jp': true, 'www.yahoo.co.jp': true,\n    'yahoo.com': true, 'www.yahoo.com': true,\n    'yandex.ru': true, 'www.yandex.ru': true,\n    'youtube.com': true, 'www.youtube.com': true,\n    'zoom.us': true, 'www.zoom.us': true,\n};\n\nexport const ALL_TIME_STATS_TEMPLATE = {\n    ads: 0,\n    silentAds: 0,\n    malwares: 0,\n    silentMalwares: 0,\n    scams: 0,\n    silentScams: 0,\n    content: 0,\n    silentContent: 0,\n}\n","import {browserName} from \"../../utils/utils\";\nimport {translateText, uiLanguage} from \"../../utils/locales.ts\";\nimport {chrome} from \"../../utils/polyfill.ts\";\nimport {MSG_EXPORT_SETTINGS, MSG_IMPORT_SETTINGS, PREMIUM_LICENSE_STATES} from \"./app-consts\";\nimport {\n    sharedRemoveBackground,\n    sharedSwitchToAppBar,\n    isPremium,\n} from \"./ui-utils/ui-utils\";\n\nimport {simpleStorageGet} from \"../../utils/storage.ts\";\nimport { TARGET_BROWSER } from \"./browser-const\";\nexport const onExportTab = async () => {\n    sharedRemoveBackground();\n    await maybeInitPremiumContent();\n};\n\nconst maybeInitPremiumContent = async () => {\n    const isPremiumUser = await isPremium();\n    const licenseState = await simpleStorageGet('licenseStatePremium');\n    const needsPremium = isPremiumUser === false;\n    sharedSwitchToAppBar(chrome.i18n.getMessage(\"exportNavItem\"), needsPremium);\n    document.getElementById(\"export-include\").classList.add(uiLanguage);\n\n    console.debug(\"INC_EXP: isPremiumUser\", isPremiumUser);\n    const exportImport = document.getElementById('export-include');\n\n    if (isPremiumUser || PREMIUM_LICENSE_STATES.includes(licenseState)) {\n        console.debug(\"INC_EXP: Premium User\");\n        initPremiumContent();\n        exportImport.querySelector('#non-premium-content').classList.add('hidden');\n        exportImport.querySelector('#premium-content').classList.remove('hidden');\n    } else {\n        console.debug(\"INC_EXP: Non-Premium User\");\n        initNonPremiumContent();\n        exportImport.querySelector('#non-premium-content').classList.remove('hidden');\n        exportImport.querySelector('#premium-content').classList.add('hidden');\n    }\n};\n\nconst initPremiumContent = () => {\n    translateText([\n        {id: \"export-header\", msg: \"exportHeader\"},\n        {id: \"export-description\", msg: \"exportDescription\"},\n        {id: \"export-option-allow-list\", msg: \"exportOptionAllowList\"},\n        {id: \"export-option-blocked-items\", msg: \"exportOptionBlockedItems\"},\n        {id: \"export-option-content-control\", msg: \"exportOptionContentControl\"},\n        {id: \"export-option-settings\", msg: \"exportOptionSettings\"},\n        {id: \"export-btn-text\", msg: \"exportBtnDefaultText\"}, // add a text for loading state\n        {id: \"import-header\", msg: \"importHeader\"},\n        {id: \"import-description\", msg: \"importDescription\"},\n        {id: \"import-btn-text\", msg: \"importBtnDefaultText\"}, // add a text for loading state\n    ]);\n    const exportCheckboxes = document.getElementsByName(\"exports\");\n    for (let i = 0; i < exportCheckboxes.length; i++) {\n        const checkbox = exportCheckboxes[i];\n        checkbox.checked = true;\n    }\n    initButtonHandlers();\n};\n\nconst initNonPremiumContent = () => {\n    console.debug(\"INC_EXP: initNonPremiumContent\");\n    translateText([\n        {id: \"export-non-premium-content-title\", msg: \"exportNonPremiumTitle\"},\n        {id: \"export-non-premium-content-msg-1\", msg: \"exportNonPremiumMessage1\"},\n        {id: \"export-non-premium-content-msg-2a\", msg: \"nonPremiumMessage2a\"},\n        {id: \"export-non-premium-content-msg-2b\", msg: \"nonPremiumMessage2b\"},\n        {id: \"export-non-premium-content-msg-2c\", msg: \"nonPremiumMessage2c\"},\n        {id: \"export-get-premium-btn\", msg: \"nonPremiumGetPremiumBtn\"},\n        {id: \"export-learn-more-btn\", msg: \"nonPremiumLearnMoreBtn\"},\n    ]);\n};\n\nconst initButtonHandlers = () => {\n    document\n        .getElementById(\"export-btn\")\n        .addEventListener(\"click\", exportClicked);\n    if (browserName() === 'Firefox') {\n        document\n            .getElementById(\"import-btn\")\n            .addEventListener(\"click\", ()=>{\n                chrome.tabs.create({url: \"eventpages/firefox-import.html\"});\n            });\n    } else {\n        document\n            .getElementById(\"import-btn\")\n            .addEventListener(\"click\", importClicked);\n    }\n};\n\nexport const exportClicked = async (_evt) => {\n    const exportBtn = document.getElementById(\"export-btn\");\n    exportBtn.classList.add(\"loading\");\n    exportBtn.disabled = true;\n    // get values of checkboxes\n    const exportCheckboxes = document.getElementsByName(\"exports\");\n    if (!exportCheckboxes) {\n        return;\n    }\n\n    const exportConfig = {};\n    for (let i = 0; i < exportCheckboxes.length; i++) {\n        const checkbox = exportCheckboxes[i];\n        exportConfig[checkbox.value] = checkbox.checked;\n    }\n\n    console.debug(\"INC_EXP: Exporting Data\", exportConfig);\n    await doExport(exportConfig);\n    exportBtn.classList.remove(\"loading\");\n    exportBtn.disabled = false;\n};\n\nconst sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\n//Your Browser Guard settings have been imported successfully\nconst doExport = async (config) => {\n    try {\n        await sleep(2000);\n        const exportData = await generateExportData(config);\n        downloadExportDataToFile(JSON.stringify(exportData));\n    } catch (err) {\n        showSnackbarMessage(\"Export failed. Please try again later.\", true);\n    }\n};\n\nconst generateExportData = (config) => {\n    return new Promise((res, rej) => {\n        chrome.runtime.sendMessage(\n            {type: MSG_EXPORT_SETTINGS, config},\n            (response) => {\n                if (!response || response.error || chrome.runtime.lastError) {\n                    console.error(\"INC_EXP: Failed to export settings\", {\n                        error:\n                            (response ? response.error : null) ||\n                            chrome.runtime.lastError,\n                    });\n                    rej(\n                        (response ? response.error : null) ||\n                            chrome.runtime.lastError\n                    );\n                } else {\n                    console.log(\"INC_EXP: Successfully exported settings\");\n                    res(response.data);\n                }\n            }\n        );\n    });\n};\n\nconst downloadExportDataToFile = (exportDataStr) => {\n    let dlDownloadName = \"BG-Export\";\n    const url = URL.createObjectURL(\n        new Blob([exportDataStr], {type: \"application/json\"})\n    );\n    console.log(\"INC_EXP: Generated export file\", url);\n    const time = new Date();\n    dlDownloadName =\n        `BG-Export_v${chrome.runtime.getManifest().version}_` +\n        `${time\n            .toISOString()\n            .slice(\n                0,\n                10\n            )}_${time.getHours()}${time.getMinutes()}${time.getSeconds()}.json`;\n    console.log(\"INC_EXP: Downloading export file\", {dlDownloadName, url});\n    const dl = chrome.downloads.download({url, filename: dlDownloadName});\n\n    const revokeURL = () => {\n        if (TARGET_BROWSER !== 'Firefox') {\n            // revoking the URL makes the download inaccessible in firefox\n            URL.revokeObjectURL(url);\n        }\n    };\n\n    if (dl) {\n        dl.then(\n            () => revokeURL(),\n            () => revokeURL()\n        );\n    }\n    console.log(\"INC_EXP: Successfully Downloaded export file\");\n};\n\nexport const importClicked = async (_evt) => {\n    const hiddenImportInput = document.getElementById(\"import-file-input\");\n    hiddenImportInput.addEventListener(\"change\", async (evt) => {\n        // get files\n        const files = evt.target.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n\n        const importBtn = document.getElementById(\"import-btn\");\n        importBtn.classList.add(\"loading\");\n        importBtn.disabled = true;\n\n        // read file\n        const file = files[0];\n        const reader = new FileReader();\n        reader.onload = async (evt) => {\n            const importData = evt.target.result;\n            try {\n                await doImport(importData);\n                showSnackbarMessage(\n                    \"Your Browser Guard settings have been imported successfully\"\n                );\n            } catch (err) {\n                console.error(\"INC_EXP: Failed to import settings\", err);\n                showSnackbarMessage(\n                    \"Import failed. Please try again later.\",\n                    true\n                );\n            }\n            importBtn.classList.remove(\"loading\");\n            importBtn.disabled = false;\n        };\n        reader.onerror = (evt) => {\n            importBtn.classList.remove(\"loading\");\n            importBtn.disabled = false;\n            console.error(\"INC_EXP: Failed to import settings\", evt);\n        };\n        reader.onabort = (evt) => {\n            importBtn.classList.remove(\"loading\");\n            importBtn.disabled = false;\n            console.error(\"INC_EXP: Aborted settings import\", evt);\n        };\n        reader.readAsText(file);\n    });\n    hiddenImportInput.click();\n};\n\nexport const doImport = async (importDataStr) => {\n    const dataAsJson = JSON.parse(importDataStr);\n    if (!dataAsJson) {\n        throw new Error(\"Invalid import data\");\n    }\n\n    console.debug(\"INC_EXP: Importing Data\", {dataAsJson});\n    await processImportData(dataAsJson);\n};\n\nconst processImportData = (dataAsJson) => {\n    return new Promise((res, rej) =>\n        chrome.runtime.sendMessage(\n            {type: MSG_IMPORT_SETTINGS, data: dataAsJson},\n            (response) => {\n                if (!response || response.error || chrome.runtime.lastError) {\n                    console.error(\"INC_EXP: Failed to import settings\", {\n                        error:\n                            (response ? response.error : null) ||\n                            chrome.runtime.lastError,\n                    });\n                    rej(\n                        (response ? response.error : null) ||\n                            chrome.runtime.lastError\n                    );\n                } else {\n                    console.log(\"INC_EXP: Successfully imported settings\");\n                    res();\n                }\n            }\n        )\n    );\n};\n\nconst showSnackbarMessage = (message, isError) => {\n    const snackbar = document.getElementById(\"export-include-snackbar\");\n    if (!snackbar) {\n        return;\n    }\n    snackbar.style.visibility = \"visible\";\n    if (isError) {\n        snackbar.classList.add(\"error\");\n    }\n    const msgSpan = snackbar.getElementsByTagName(\"span\");\n    if (msgSpan && msgSpan.length > 0) {\n        msgSpan[0].innerText = message;\n    }\n    setTimeout(() => {\n        snackbar.style.visibility = \"hidden\";\n        snackbar.classList.remove(\"error\");\n    }, 3000);\n};\n","import {translateText} from \"../../utils/locales.ts\";\nimport {doImport} from \"./include-export\";\nimport {chrome} from '../../utils/polyfill.ts';\nimport {isPremium} from \"./ui-utils/ui-utils\";\n\nconst initCustomDragAndDropListeners = () => {\n    const importDragAndDrop = document.getElementById(\"drag-and-drop\");\n    importDragAndDrop.addEventListener(\"dragover\", (e) => {\n        e.preventDefault();\n        importDragAndDrop.classList.add(\"drag-over\");\n    });\n\n    importDragAndDrop.addEventListener(\"dragleave\", (e) => {\n        e.preventDefault();\n        importDragAndDrop.classList.remove(\"drag-over\");\n    });\n\n    importDragAndDrop.addEventListener(\"drop\", (e) => {\n        e.preventDefault();\n        const file = e.dataTransfer.files[0];\n        handleImportedFile(file);\n    });\n\n    document.getElementById(\"file-input\").addEventListener(\"change\", (e) => {\n        const file = e.target.files[0];\n        handleImportedFile(file);\n    });\n};\n\nexport const updateProgressContainer = (status) => {\n    const imgStatus = document.getElementById('img-status');\n    const progressBar = document.getElementById('progress-bar');\n    const progressPercentage = document.getElementById('progress-percentage');\n    const statusDescription = document.getElementById('status-desc');\n\n    imgStatus.setAttribute('class', '');\n    progressBar.setAttribute('class', '');\n\n    if (status === 'completed') {\n        imgStatus.classList.add('import-successful');\n        progressBar.classList.add('progress-complete');\n        progressPercentage.textContent = '100%';\n        statusDescription.textContent = chrome.i18n.getMessage('ImportStatusDescriptionComplete');\n        return;\n    }\n    if (status === 'unauthorized') {\n        const nonPremiumDescription = document.getElementById('non-premium-desc');\n        const nonPremiumText = document.getElementById('non-premium-txt');\n        imgStatus.classList.add('import-error');\n        progressBar.classList.add('progress-error');\n        statusDescription.style.display = 'none';\n        progressPercentage.textContent = 'Unauthorized';\n        nonPremiumDescription.style.display = 'inherit';\n        nonPremiumText.textContent = chrome.i18n.getMessage('ImportStatusDescriptionUnauthorized');\n        return;\n    }\n\n    // On Error\n    const tryAgainBtn = document.getElementById('try-again-btn');\n\n    imgStatus.classList.add('import-error');\n    progressBar.classList.add('progress-error');\n    progressPercentage.textContent = 'Error';\n    statusDescription.textContent = chrome.i18n.getMessage('ImportStatusDescriptionError');\n    document.getElementById('error-btns-container').style.display = 'inherit';\n    tryAgainBtn.addEventListener('click', () => {\n        location.reload();\n    });\n    return;\n};\n\nconst handleImportedFile = async (file) => {\n    const importDragAndDrop = document.getElementById('drag-and-drop');\n    const progressContainer = document.getElementById('progress-container');\n    const statusDescription = document.getElementById('status-desc');\n    const fileNameSpan = document.getElementById('file-name');\n\n    if (!file) {\n        importDragAndDrop.classList.remove('drag-over');\n        return console.log('No file selected');\n    }\n    console.log('Importing File', file.name);\n    const reader = new FileReader();\n    const importBtn = document.getElementById(\"import-btn\");\n\n    importBtn.classList.add(\"loading\");\n    importBtn.disabled = true;\n    importDragAndDrop.remove();\n\n    progressContainer.style.display = 'inherit';\n    progressContainer.style.opacity = 1;\n    fileNameSpan.textContent = `${file.name} - ${chrome.i18n.getMessage('ImportingTxt')}`;\n    fileNameSpan.style.fontWeight = 500;\n    fileNameSpan.style.letterSpacing = '0.1px';\n    statusDescription.textContent = chrome.i18n.getMessage('ImportStatusDescriptionOnLoad');\n\n\n    const isPremiumUser = await isPremium();\n    if (!isPremiumUser) {\n        progressContainer.style.display = 'inherit';\n        progressContainer.style.opacity = 1;\n        return updateProgressContainer('unauthorized');\n    }\n\n    reader.onload = async (evt) => {\n        const importData = evt.target.result;\n        try {\n            await doImport(importData);\n            updateProgressContainer('completed');\n            console.debug(\"INC_EXP: Import completed\");\n        } catch (err) {\n            updateProgressContainer('error');\n            console.error(\"INC_EXP: Failed to import settings\", err);\n        }\n        importBtn.classList.remove(\"loading\");\n        importBtn.disabled = false;\n    };\n\n    reader.onerror = (evt) => {\n        importBtn.classList.remove(\"loading\");\n        importBtn.disabled = false;\n        console.error(\"INC_EXP: Failed to import settings\", evt);\n    };\n\n    reader.onabort = (evt) => {\n        importBtn.classList.remove(\"loading\");\n        importBtn.disabled = false;\n        console.error(\"INC_EXP: Aborted settings import\", evt);\n    };\n\n    reader.readAsText(file);\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    translateText([\n        {id: 'dd-title', msg: 'DragAndDropTitle'},\n        {id: 'dd-desc', msg: 'DragAndDropDescription'},\n        {id: 'import-btn', msg: 'ImportBtnText'},\n        {id: 'status-desc', msg: 'ImportStatusDescription'},\n        {id: 'try-again-btn', msg: 'ImportTryAgainBtn'},\n        {id: 'contact-support-btn', msg: 'ImportSupportBtn'},\n    ]);\n    initCustomDragAndDropListeners();\n});\n","import {\n    MSG_IS_PREMIUM,\n    MSG_IS_TRIAL,\n    MSG_SETTINGS_GET,\n    MSG_SETTINGS_SET, MSG_TAB_DATA_GET,\n    RELOAD_ON_CLOSE_PORT,\n    SETTING_KILLSWITCH, SETTING_NATIVE_MESSAGING,\n    SETTING_TELEMETRY_CONSENT,\n    MSG_QUERY_FEATURE_FLAG,\n    IS_URL_PERM_REMOVED_FLAG,\n    DEFAULT_PERMISSIONS,\n    MSG_UPDATE_PROTECTION_ON_PERM_CHANGE,\n    MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,\n    MV3_PROTECTION_ADS,\n    SETTING_ADS,\n    SETTING_MALWARE,\n    SETTING_SCAMS,\n    MV3_PROTECTION_MALWARE,\n    MV3_PROTECTION_SCAMS,\n    CSS_NOTIFICATION_INFO,\n    CSS_GLOBAL_NOTIFICATION,\n    BROWSERS,\n    MSG_CLOSE_POPUP,\n    BROWSER_PERMISSIONS,\n    EXCLUSION_ADS,\n    EXCLUSION_MALWARE,\n    EXCLUSION_SCAMS,\n    CSS_NOTIFICATION_WARNING\n} from '../app-consts';\nimport { translateText } from '@/utils/locales.ts'\nimport { simpleStorageGet } from '@/utils/storage.ts';\nimport {chrome} from '../../../utils/polyfill.ts';\nimport {msgPromptNativeMsg, msgRemoveNativeMessaging} from '../../../utils/native-messaging.ts';\nimport { browserName } from '../../../utils/utils';\nexport const PageType = {\n    NORMAL: \"NORMAL\",\n    SYSTEM: \"SYSTEM\",\n    EXTENSION: \"EXTENSION\",\n    BROWSER_GUARD: \"BROWSER_GUARD\",\n    BLANK_NEW_TAB: \"BLANK_NEW_TAB\",\n    CHROME_WEBSTORE: \"CHROME_WEBSTORE\",\n    //MALWAREBYTES: \"MALWAREBYTES\"\n};\nconst SETTING_WITH_URL_PERMISSIONS = [SETTING_ADS, SETTING_MALWARE, SETTING_SCAMS];\nconst port = {reload: null};\nconst exclusionToSettingsMapper = {\n    [EXCLUSION_ADS]: SETTING_ADS,\n    [EXCLUSION_MALWARE]: SETTING_MALWARE,\n    [EXCLUSION_SCAMS]: SETTING_SCAMS\n};\n\n//NOTE: Current bug in chrome makes listening for popup close events impossible\n//  https://bugs.chromium.org/p/chromium/issues/detail?id=31262#c13\nexport const reloadOnClose = function() {\n    if (!port.reload) {\n        //When we switch a switch, start a port to background page\n        port.reload = chrome.runtime.connect({\n            name: RELOAD_ON_CLOSE_PORT,\n        });\n        console.debug(\"Began listening for a popup close event\");\n    }\n};\n\nexport const showGlobalNotification = (innerHTML, type = CSS_NOTIFICATION_INFO , showDuration = 3000) => {\n    const notification = document.getElementById(CSS_GLOBAL_NOTIFICATION);\n    notification.classList.add(type);\n    notification.innerHTML = innerHTML;\n    notification.style.display = 'flex';\n    setTimeout(() => {\n        notification.style.display = 'none';\n    }, showDuration);\n};\n\nconst settingsGet = function(\n    settingIdConstant,\n    successCallback,\n    optionalErrorCallback\n) {\n    if (!optionalErrorCallback) {\n        optionalErrorCallback = (msg) => console.error(msg);\n    }\n    chrome.runtime.sendMessage(\n        {type: MSG_SETTINGS_GET, payload: settingIdConstant},\n        function(response) {\n            if (!response || response.error) {\n                optionalErrorCallback(\n                    \"Error calling settingsGet: \" +\n                        (response ? response.error : \"No response received\")\n                );\n            } else {\n                successCallback(response.success);\n            }\n        }\n    );\n};\n\nexport const settingsGetAsync = (settingIdConstant) => new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(\n        {type: MSG_SETTINGS_GET, payload: settingIdConstant},\n        function(response) {\n            if (!response || response.error) {\n                // eslint-disable-next-line prefer-promise-reject-errors\n                console.debug('SETTINGS GET ASYNC: ERROR CALLING settingsGet');\n                // eslint-disable-next-line prefer-promise-reject-errors\n                reject(`Error calling settingsGet: ${(response ? response.error : \"No response received\")}`);\n            } else {\n                resolve(response.success);\n            }\n        }\n    );\n});\n\n/**\n * This function is used to get the settings by exclusion\n * @param {string} exclusionConst - The exclusion constant\n * @returns {Promise} - Returns a promise that resolves to the settings value\n * \n*/\nexport const getSettingsByEclusion = async (exclusionConst) => {\n    const settingIdConstant = exclusionToSettingsMapper[exclusionConst];\n    if (!settingIdConstant) {\n        console.error(`No setting found for exclusion: ${exclusionConst}`);\n        return null;\n    }\n    return await settingsGetAsync(settingIdConstant);\n}\n\nexport function featureFlagGetAsync(feature) {\n    return new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage({\n            type: MSG_QUERY_FEATURE_FLAG,\n            payload: { feature } \n        }, (response) => {\n            if (!response) {\n                reject(new Error(`Error getting feature flag for ${feature}`));\n            } else {\n                resolve(response.isEnabled);\n            }\n        });\n    });\n}\n\nexport const settingsSetAsync = (settingsPayload) => new Promise((resolve, reject) => {\n    //NOTE: We are not directly accessing settings as later we may want to encrypt them so content scripts cant\n    //change tem // TODO: Can content scripts access out settings via our background script\n    chrome.runtime.sendMessage(\n        {type: MSG_SETTINGS_SET, payload: settingsPayload},\n        function(response) {\n            if (!response || response.error) {\n                // eslint-disable-next-line prefer-promise-reject-errors\n                reject(`Error calling settingsSet: ${response ? response.error : \"No response received\"}`);\n            } else {\n                //TODO: That same payload probably needs to be applied to malwarebytes.SETTINGS\n                resolve(response.success);\n            }\n        }\n    );\n});\n\nexport const updateCheckboxDisabledState = function(targetCheckbox, isDisabled) {\n    $(targetCheckbox).prop(\"disabled\", isDisabled);\n    updateCheckboxParentToState(targetCheckbox);\n};\n\nconst linkCheckboxToKillswitch = async function(\n    targetCheckbox,\n    settingIdConstant\n) {\n    //NOTE: Consent and Killswitch checkboxes don't get disabled, so no need to check\n    if (\n        settingIdConstant !== SETTING_KILLSWITCH &&\n        settingIdConstant !== SETTING_TELEMETRY_CONSENT &&\n        settingIdConstant !== SETTING_NATIVE_MESSAGING &&\n        targetCheckbox\n    ) {\n        const killSwitchState = await getKillswitchStateAsync();\n        $(targetCheckbox).prop(\"disabled\", killSwitchState === false);\n    }\n};\n\nexport const getKillswitchState = function(callback) {\n    settingsGet(SETTING_KILLSWITCH, callback);\n};\n\nexport const getKillswitchStateAsync = () => settingsGetAsync(SETTING_KILLSWITCH);\n\nexport const updateCheckboxParentToState = (targetCheckbox) => {\n    let parent = $(targetCheckbox).parent();\n    if (targetCheckbox.checked) {\n        parent.addClass(\"checked\");\n    } else {\n        parent.removeClass(\"checked\");\n    }\n    if ($(targetCheckbox).prop(\"disabled\") === true) {\n        parent.addClass(\"disabled\");\n    } else {\n        parent.removeClass(\"disabled\");\n    }\n};\n\n\n/**\n * This function checks if the URL permission is removed and skips the event if it is\n * @param {string} settingIdConstant - The setting ID constant\n * @returns {promise} - Returns a promise that resolves to a boolean value indicating if the event was skipped\n * */\nexport const isFFUrlPermissionRemovedSkip = async (settingIdConstant = null) => {\n\n    // If the setting is not in the list of settings that require URL permissions, return false\n    if (settingIdConstant && !SETTING_WITH_URL_PERMISSIONS.includes(settingIdConstant)) {\n        return false;\n    }\n\n    const UrlPermissionFlag = await simpleStorageGet(IS_URL_PERM_REMOVED_FLAG);\n    if (UrlPermissionFlag) {\n        return true;\n    }\n\n    return false\n}\n\nconst bindSettingsCheckboxEvent = async function(\n    targetCheckbox,\n    settingIdConstant,\n    optAfterChangeListener\n) {\n    targetCheckbox.addEventListener(\"change\", async (event) => {\n        \n        const isProtectionOnHold = browserName() == BROWSERS.FIREFOX && \n        await isFFUrlPermissionRemovedSkip(settingIdConstant)\n\n        if (isProtectionOnHold) {\n            event.preventDefault();\n            event.target.checked = false;\n            showGlobalNotification(`\n                <span class=\"pseudo-xmark\"></span>${chrome.i18n.getMessage('URLPermissionRequired')}\n            `, CSS_NOTIFICATION_WARNING);\n            return;\n        }\n\n        //NOTE: Disable any clicked checkbox temporarily, to avoid spamming\n        let defaultState = $(targetCheckbox).prop(\"disabled\");\n        console.debug(\n            \"CB: Default state of \" +\n                targetCheckbox.id +\n                \" is \" +\n                (defaultState ? \"disabled\" : \"active\")\n        );\n        $(targetCheckbox).prop(\"disabled\", true); // don't allow changes while we sync\n        let settings = {};\n        settings[settingIdConstant] = $(targetCheckbox).prop(\"checked\");\n        updateCheckboxParentToState(targetCheckbox);\n\n        if (\n            settingIdConstant === SETTING_NATIVE_MESSAGING\n        ) {\n            if (settings[settingIdConstant]) {\n                settings[settingIdConstant] = await msgPromptNativeMsg();\n            } else {\n                settings[settingIdConstant] = await msgRemoveNativeMessaging();\n            }\n        }\n        //Excluding the killswitch checkbox action\n        settingIdConstant !== SETTING_KILLSWITCH && await settingsSetAsync(settings);\n\n        console.debug(\n            \"CB: Setting has been stored for \" + targetCheckbox.id\n        );\n        if (optAfterChangeListener) {\n            optAfterChangeListener(event);\n        }\n\n        setTimeout(() => {\n            console.debug(\n                \"CB: Restoring \" +\n                    targetCheckbox.id +\n                    \" to \" +\n                    (defaultState ? \"disabled\" : \"active\")\n            );\n            updateCheckboxDisabledState(targetCheckbox, defaultState);\n        }, 750);\n\n        settingIdConstant !== SETTING_KILLSWITCH && reloadOnClose();\n    });\n};\n\nconst validatePageForInjection = (tab) => {\n    return new Promise((resolve, _ignored) => {\n        let validation = {\n            id: tab.id,\n            url: tab.url,\n            isValid: true,\n            pageType: PageType.NORMAL,\n            host: tab.url, //updated outside of this method\n            blocked: {totals: {}}, //counts, updated outside of this method\n            redirectType: null, //eg malware, if we are a browserguard error page\n            redirectSubType: null, //eg trojan, if we are a browserguard error page\n        };\n        if (validation.url.startsWith(\"chrome://\")) {\n            //\"chrome://extensions/\"\n            validation.isValid = false;\n            if (validation.url.startsWith(\"chrome://newtab/\" || validation.url.startsWith(\"chrome://new-tab-page/\"))) {\n                validation.pageType = PageType.BLANK_NEW_TAB;\n            } else {\n                validation.pageType = PageType.SYSTEM;\n            }\n        } else if (\n            validation.url.startsWith(\"chrome-extension://\") ||\n            validation.url.startsWith(\"moz-extension://\") ||\n            validation.url.startsWith(\"extension://\")\n        ) {\n            //moz-extension://d013010e-febc-47bd-bf00-7bea93101aa7/\n            //\"chrome-extension://jlehollbgihdnbjpbdliihlmjmkifpcf/redirects/blockedMalware.html\n            //          ?url=http%3A%2F%2Fscreensavers.com%2F&host=screensavers.com&type=malware&subtype=trojan\"\n            validation.isValid = false;\n            if (\n                validation.url.startsWith(`chrome-extension://${chrome.runtime.id}/`) ||\n                (window.browser &&\n                    validation.url.startsWith(\n                        `moz-extension://${chrome.i18n.getMessage(\"@@extension_id\")}/`\n                    )\n                ) ||\n                validation.url.startsWith(`extension://${chrome.runtime.id}/`)\n            ) {\n                //look for browser guard's install id (the jlehollbgihdnbjpbdliihlmjmkifpcf above)\n                validation.pageType = PageType.BROWSER_GUARD;\n                let params = new URL(tab.url).searchParams;\n                if (params.has(\"url\")) {\n                    validation.url = params.get(\"url\");\n                }\n                if (params.has(\"host\")) {\n                    validation.host = params.get(\"host\");\n                }\n                if (params.has(\"type\")) {\n                    validation.redirectType = params.get(\"type\");\n                }\n                if (params.has(\"subtype\")) {\n                    validation.redirectSubType = params.get(\"subtype\");\n                }\n            } else {\n                validation.pageType = PageType.EXTENSION;\n            }\n        //NOTE: about: are mozilla settings pages\n        } else if (validation.url.startsWith(\"about:\")) {\n            validation.isValid = false;\n            if ([\"about:newtab\", \"about:blank\"].some((page) => validation.url.startsWith(page))) {\n                validation.pageType = PageType.BLANK_NEW_TAB;\n            } else {\n                validation.pageType = PageType.SYSTEM;\n            }\n        } else if (validation.url.startsWith(\"edge://\")) {\n            validation.isValid = false;\n            if (validation.url.startsWith(\"edge://newtab/\")) {\n                validation.pageType = PageType.BLANK_NEW_TAB;\n            } else {\n                validation.pageType = PageType.SYSTEM;\n            }\n        } else if (validation.url.indexOf(\"chromewebstore.google.com\") >= 0) {\n            //This appears to be a protected store that does not return it's requests to us in background\n            //that may-or-may-not be only as a consequence of opening via settings\n            validation.isValid = false;\n            validation.pageType = PageType.CHROME_WEBSTORE;\n        }\n        resolve(validation);\n    });\n};\n\nexport const sharedAddBackground = () => {\n    document.body.classList.add(\"mb-landscape\");\n};\n\nexport const sharedRemoveBackground = () => {\n    document.body.classList.remove(\"mb-landscape\");\n};\n\nexport const sharedSwitchToAppBar = (label, optionalNeedsPremium) => {\n    $(\".mb-current-website-tab span\").text(label);\n    $('.header-container-tabs .first-tab').removeAttr('style');\n    $(\".header-container-tabs .first-tab\").removeClass('mb-tabs');\n    $(\".header-container-tabs .first-tab\").addClass('mb-dynamic-tab');\n    if (optionalNeedsPremium === true) {\n        $(\".mb-current-website-tab span\").addClass('needs-premium');\n    }\n\n    $(\"#dashboard-stats-tab\").css('display', 'none');\n    $(\"#dashboard-upsell-tab\").css('display', 'none');\n    $(\".back-span\").css('display', 'flex');\n    $(\".globe\").css('display', 'none');\n    $(\".mb-stats-tab\").addClass(\"hidden\");\n};\n\nexport const linkCheckboxToSetting = async function(\n    checkboxId,\n    settingIdConstant,\n    optionalLoaderSelector,\n    optAfterChangeListener\n) {\n    if (optionalLoaderSelector) {\n        $(optionalLoaderSelector).addClass(\"active\");\n    }\n    let targetCheckbox = document.getElementById(checkboxId);\n    if (!targetCheckbox) {\n        return;\n    }\n    //NOTE: Get starting value of checkbox\n    await linkCheckboxToKillswitch(targetCheckbox, settingIdConstant);\n    const loadedState = await settingsGetAsync(settingIdConstant);\n    // Malwarebytes.SETTING_NATIVE_MESSAGING needs to allow for an undefined value\n    if (settingIdConstant !== SETTING_NATIVE_MESSAGING) {\n        targetCheckbox.checked = loadedState !== false;\n    } else {\n        targetCheckbox.checked = loadedState;\n    }\n    updateCheckboxParentToState(targetCheckbox);\n    //NOTE: the following handles disabled toggling during event\n    if (optionalLoaderSelector) {\n        $(optionalLoaderSelector).removeClass(\"active\");\n    }\n    await bindSettingsCheckboxEvent(\n        targetCheckbox,\n        settingIdConstant,\n        optAfterChangeListener\n    );\n};\n\nexport const isTrial = (successCallback, optionalErrorCallback) => {\n    if (!optionalErrorCallback) {\n        optionalErrorCallback = (msg) => console.error(msg);\n    }\n    chrome.runtime.sendMessage(\n        {type: MSG_IS_TRIAL},\n        function(response) {\n            if (!response || response.error) {\n                optionalErrorCallback(\n                    \"Error calling isTrial: \" +\n                    (response ? response.error : \"No response received\")\n                );\n            } else {\n                successCallback(response.success);\n            }\n        }\n    );\n};\n\nexport const isPremium = () => {\n    return new Promise((res, rej) => {\n        chrome.runtime.sendMessage({type: MSG_IS_PREMIUM}, function(response) {\n            if (!response || response.error) {\n                console.error(\"Failed to check if premium: \" + response.error);\n                rej(response.error);\n            } else {\n                console.debug(\"Is premium: \" + response.success);\n                res(response.success);\n            }\n        });\n    });\n};\n\n//TODO: ADJUST ALL USAGES FOR PROMISE - REMOVE THE TWO CALLBACKS!\nexport const getCurrentTabData = (successCallback, optionalErrorCallback) => {\n    if (!optionalErrorCallback) {\n        optionalErrorCallback = (msg) => console.error(msg);\n    }\n    new Promise((resolve) => {\n        chrome.tabs.query(\n            {currentWindow: true, active: true},\n            function(tabs) {\n                resolve(tabs);\n            }\n        );\n    })\n        .then((tabs) => {\n            return validatePageForInjection(tabs[0]);\n        })\n        .then((validationData) => {\n            if (validationData.isValid) {\n                chrome.runtime.sendMessage(\n                    {\n                        type: MSG_TAB_DATA_GET,\n                        payload: validationData.id,\n                    },\n                    function(response) {\n                        if (!response || response.error) {\n                            //RECOVER GRACEFULLY\n                            successCallback(validationData);\n                            console.error(\n                                \"Error calling getCurrentTabData: \" +\n                                (response ?\n                                    response.error :\n                                    \"No response received\")\n                            );\n                        } else {\n                            validationData.blocked = response.success.blocked;\n                            validationData.host = response.success.host;\n                            validationData.excluded = response.success.excluded;\n                            successCallback(validationData);\n                        }\n                    }\n                );\n            } else {\n                successCallback(validationData);\n            }\n        })\n        .catch((err) => {\n            optionalErrorCallback(err);\n        });\n};\nexport const ellipsisSlice = (text, maxLength = 22)=> {\n    return `${text.slice(0, maxLength)}...`;\n};\n\nexport function downloadJSONfile(data, filename) {\n    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    chrome.downloads.download({\n        url,\n        filename,\n        saveAs: true\n    });\n}\n\n\nexport const closePopup = () => {\n    // send message to background to close the popup with message MSG_CLOSE_POPUP and the call back from there returns true of false\n    chrome.runtime.sendMessage({type: MSG_CLOSE_POPUP}, function(response) {\n        if (response) {\n            console.log('Popup closed successfully');\n        } else {\n            throw new Error('Failed to close the popup');   \n        }\n    });\n};\n\n\n/*\n* This function requests the URL permissions from the user\n* permissionsToRequest type :{ origins?: string[] | undefined, permissions?: string[] | undefined }\n*/\nexport async function requestAccessPermissions(permissionsToRequest) {\n    \n    const onResponse = async (response) => {\n        if (response) {\n            console.log(\"Permission was granted\", await chrome.permissions.getAll());\n            return true;\n        } else {\n            console.log(\"Permission was refused\");\n            return false;\n        }\n    }\n\n    const response = await chrome.permissions.request(permissionsToRequest);\n    const result = await onResponse(response);\n    console.log(`Permissions request operation result:`, result);\n\n    return result;    \n}\n\n/*\n* This function removes the URL permissions from the user\n* permissionsToRemove type :{ origins?: string[] | undefined, permissions?: string[] | undefined }\n* @returns {boolean} - Returns a boolean value indicating if the permission was removed\n*/\nexport async function removeAccessPermissions(permissionsToRemove) {\n    const onResponse = async (response) => {\n        if (response) {\n            console.log(\"Permission was removed\", await chrome.permissions.getAll());\n            return true;\n        } else {\n            console.log(\"Permission was not removed\");\n            return false;\n        }\n    }\n\n    const response = await chrome.permissions.remove(permissionsToRemove);\n    const result = await onResponse(response);\n    console.log(`Permissions remove operation result:`, result);\n\n    return result;\n}\n\n/*\n* Handle the permission request button click event in URL Permission Bar \n*/\n\nexport const handleFFPermissionRequestBtn = async ()=> {\n    const permissionsToRequest = { origins: DEFAULT_PERMISSIONS.origins };\n    if ( await requestAccessPermissions(permissionsToRequest) ) {\n        chrome.runtime.sendMessage({\n            type: MSG_UPDATE_PROTECTION_ON_PERM_CHANGE,\n            payload: { status: true }\n        })\n        chrome.runtime.sendMessage({\n            type: MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,\n            protection: MV3_PROTECTION_ADS,\n            enable: true\n        });\n        chrome.runtime.sendMessage({\n            type: MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,\n            protection: MV3_PROTECTION_MALWARE,\n            enable: true\n        });\n        chrome.runtime.sendMessage({\n            type: MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,\n            protection: MV3_PROTECTION_SCAMS,\n            enable: true\n        });\n    }\n};\n\n/*\n* Show permission request in document by setting display: flex\n*/\nexport const showFFPermsRequestBarByFlag = async (document) => {\n    const permissionFlag = await simpleStorageGet(IS_URL_PERM_REMOVED_FLAG);\n    if (permissionFlag) { // by default, display: none\n\n        document.querySelector('.url-permission-bar').style.display = 'flex';\n\n        translateText([\n            {id: \"permission-req-bar-desc\", msg: \"SettingsPermissionReqBarDesc\"},\n            {id: \"permission-req-bar-btn\", msg: \"SettingsPermissionReqBarBtn\"},\n        ], document);\n\n        document.querySelector(`.url-permission-bar #permission-req-bar-btn`).addEventListener(\n            'click', handleFFPermissionRequestBtn\n        );\n    }\n}\n\nexport const getUngrantedPermissions = async () => {\n\n    const browser = browserName();\n    const wantedPermissions = BROWSER_PERMISSIONS[browser]?.permissions || [];\n    const wantedOrigins = BROWSER_PERMISSIONS[browser]?.origins || [];\n    const allWantedPermissions = [...wantedPermissions, ...wantedOrigins];\n\n    const currentPermissions = await chrome?.permissions?.getAll();\n\n    const ungrantedPermissions = allWantedPermissions.filter(permission => {\n        return !currentPermissions.permissions.includes(permission);\n    });\n\n    return ungrantedPermissions || [];\n};\n\nexport async function  showOptionalPermRequestBar(document) {\n    const ungrantedPermissions = await getUngrantedPermissions();\n    if (ungrantedPermissions.length > 0) {\n        document.querySelector('.url-permission-bar').style.display = 'flex';\n\n        translateText([\n            { id: \"permission-req-bar-desc\", msg: \"OptionalPermissionReqBarDesc\" },\n            { id: \"permission-req-bar-btn\", msg: \"OptionalPermissionReqBarBtn\" },\n        ], document);\n\n        document.querySelector(`.url-permission-bar #permission-req-bar-btn`).addEventListener(\n            'click', async () => {\n                const url = chrome.runtime.getURL(\"app/eventpages/permission-request.html\");\n                await chrome.tabs.create({ url });\n            }\n        );\n    } else { // No ungranted permissions, hide the bar\n        document.querySelector('.url-permission-bar').style.display = 'none';\n    }\n}\n\n/*\n* This function checks if the extension is pinned to the toolbar\n*/\nexport async function isExtensionPinnedOnToolbar() {\n    try {\n        const userSettings = await chrome.action.getUserSettings();\n        // If isOnToolbar is defined and true, return true; otherwise, return false\n        return Boolean(userSettings?.isOnToolbar);\n    } catch (error) {\n        console.error('Failed to get user settings (extension pinned):', error);\n        return false;\n    }\n}\n\n\n"],"names":["chrome","browser","window","runtime","getURL","GLOBAL_CONTEXT","self","polyBrowser","idb","indexedDB","error","console","log","message","performance","URL","i18n","getUILanguage","split","Object","freeze","LicenseStateUnknown","LicenseStateFree","LicenseStateTrial","LicenseStateTrialExpired","LicenseStateLicensed","LicenseStateLicenseExpired","LicenseStateLicenseGrace","MALWARE","type","FULL_URL_MALWARE","SUSPICIOUS_PAGE","SUSPICIOUS_TLD","RISKY_PATTERN","SUSPICIOUS_CONTENT","MALWARE_PATTERN","ALERT_LOOP","AUTH_REQUIRED_LOOP","CREATE_URL_LOOP","EXTENSION_INSTALL","FULL_SCREEN_LOOP","HISTORY_LOOP","NOTIFICATION_LOOP","PRINT_LOOP","ADWARE","REPUTATION","TROJAN","MALVERTISING","WORM","RANSOMWARE","ROOTKIT","BACKDOOR","SPYWARE","ALLOWED_EXCLUSION_VALUE","SCAM","TSS","SCAM_HEURISTIC","PHISHING","PHISHING_SUSPICIOUS_POST","PHISHING_BANKING","PHISHING_LOGIN","PHISHING_LOGIN_VIA_TUNNEL","TELEMETRY_PHISHING_TUNNEL","AD","ADSERVER","ADS","CHROME","FIREFOX","OPERA","EDGE","SAFARI","origins","permissions","optional_permissions","RegExp","Chrome","Firefox","Edge","Safari","clipboardRead","title","description","clipboardWrite","alarms","downloads","storage","tabs","declarativeNetRequest","declarativeNetRequestFeedback","unlimitedStorage","webRequest","contextMenus","nativeMessaging","offscreen","activeTab","processImportData","dataAsJson","Promise","res","rej","sendMessage","data","response","lastError","updateProgressContainer","status","imgStatus","document","getElementById","progressBar","progressPercentage","statusDescription","setAttribute","classList","add","textContent","getMessage","nonPremiumDescription","nonPremiumText","style","display","tryAgainBtn","addEventListener","location","reload","handleImportedFile","async","importDragAndDrop","progressContainer","fileNameSpan","file","remove","name","reader","FileReader","importBtn","disabled","opacity","fontWeight","letterSpacing","debug","success","onload","importData","evt","target","result","JSON","parse","importDataStr","Error","doImport","err","onerror","onabort","readAsText","nodes","dom","id","msg","forEach","sub","element","undefined","translateText","initCustomDragAndDropListeners","e","preventDefault","dataTransfer","files"],"sourceRoot":""}